
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.url.compis.proyectofas2;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\005\000\002\006\004\000\002\022\007\000" +
    "\002\005\004\000\002\005\003\000\002\007\006\000\002" +
    "\007\006\000\002\010\013\000\002\010\006\000\002\010" +
    "\013\000\002\010\006\000\002\010\013\000\002\010\006" +
    "\000\002\011\013\000\002\011\006\000\002\011\013\000" +
    "\002\011\006\000\002\011\013\000\002\011\006\000\002" +
    "\023\004\000\002\023\003\000\002\024\005\000\002\024" +
    "\007\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\025\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\010\000\002\026" +
    "\010\000\002\026\013\000\002\026\013\000\002\026\005" +
    "\000\002\026\010\000\002\026\010\000\002\027\007\000" +
    "\002\027\007\000\002\027\007\000\002\027\011\000\002" +
    "\027\011\000\002\027\011\000\002\027\007\000\002\027" +
    "\006\000\002\031\010\000\002\031\007\000\002\031\005" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\036\033\000\002\036\047\000\002\036\046\000" +
    "\002\037\010\000\002\037\010\000\002\037\010\000\002" +
    "\037\010\000\002\037\007\000\002\037\007\000\002\037" +
    "\007\000\002\037\007\000\002\040\022\000\002\040\022" +
    "\000\002\040\024\000\002\040\024\000\002\032\015\000" +
    "\002\032\013\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\006\000\002\030\006\000\002\030" +
    "\006\000\002\012\004\000\002\012\004\000\002\012\003" +
    "\000\002\012\003\000\002\013\022\000\002\013\022\000" +
    "\002\013\022\000\002\013\022\000\002\013\022\000\002" +
    "\014\016\000\002\014\016\000\002\014\016\000\002\014" +
    "\016\000\002\014\016\000\002\014\012\000\002\015\005" +
    "\000\002\016\005\000\002\017\005\000\002\020\005\000" +
    "\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b6\000\010\007\004\026\007\040\011\001\002\000" +
    "\004\055\u01b5\001\002\000\004\055\042\001\002\000\004" +
    "\002\u01b3\001\002\000\004\055\023\001\002\000\004\007" +
    "\004\001\002\000\004\055\020\001\002\000\006\007\ufff7" +
    "\026\007\001\002\000\012\002\ufffc\007\ufffc\026\ufffc\040" +
    "\ufffc\001\002\000\012\002\uffff\007\004\026\007\040\011" +
    "\001\002\000\012\002\ufffe\007\ufffe\026\ufffe\040\ufffe\001" +
    "\002\000\004\002\001\001\002\000\004\007\ufff8\001\002" +
    "\000\004\024\021\001\002\000\012\002\ufffb\007\ufffb\026" +
    "\ufffb\040\ufffb\001\002\000\012\002\ufffd\007\ufffd\026\ufffd" +
    "\040\ufffd\001\002\000\004\025\024\001\002\000\004\055" +
    "\025\001\002\000\004\055\030\001\002\000\006\007\ufff6" +
    "\026\ufff6\001\002\000\006\007\ufff5\026\ufff5\001\002\000" +
    "\016\030\033\031\034\032\031\033\035\034\036\035\032" +
    "\001\002\000\004\101\u01ad\001\002\000\004\101\u01a7\001" +
    "\002\000\004\101\u01a1\001\002\000\004\101\u0199\001\002" +
    "\000\004\101\u0193\001\002\000\004\101\037\001\002\000" +
    "\010\007\uffe9\026\uffe9\055\040\001\002\000\004\055\041" +
    "\001\002\000\004\055\042\001\002\000\004\055\052\001" +
    "\002\000\016\002\uffe7\007\uffe7\026\uffe7\040\uffe7\055\042" +
    "\072\uffe7\001\002\000\004\072\045\001\002\000\004\055" +
    "\046\001\002\000\004\055\050\001\002\000\006\007\uffea" +
    "\026\uffea\001\002\000\010\033\035\034\036\035\032\001" +
    "\002\000\014\002\uffe8\007\uffe8\026\uffe8\040\uffe8\072\uffe8" +
    "\001\002\000\034\004\067\006\064\007\060\010\074\012" +
    "\075\013\062\015\057\023\066\025\072\051\065\053\073" +
    "\054\077\055\076\001\002\000\016\002\uffe6\007\uffe6\026" +
    "\uffe6\040\uffe6\055\uffe6\072\uffe6\001\002\000\016\002\uffde" +
    "\007\uffde\026\uffde\040\uffde\055\uffde\072\uffde\001\002\000" +
    "\016\002\uffe3\007\uffe3\026\uffe3\040\uffe3\055\uffe3\072\uffe3" +
    "\001\002\000\016\002\uffe2\007\uffe2\026\uffe2\040\uffe2\055" +
    "\uffe2\072\uffe2\001\002\000\004\055\u0183\001\002\000\004" +
    "\055\u017f\001\002\000\016\002\uffe4\007\uffe4\026\uffe4\040" +
    "\uffe4\055\uffe4\072\uffe4\001\002\000\004\055\u0141\001\002" +
    "\000\022\002\uffa0\004\067\006\064\007\uffa0\026\uffa0\040" +
    "\uffa0\055\uffa0\072\uffa0\001\002\000\004\055\u0107\001\002" +
    "\000\004\055\u0105\001\002\000\006\055\375\056\114\001" +
    "\002\000\004\055\253\001\002\000\016\002\uffdd\007\uffdd" +
    "\026\uffdd\040\uffdd\055\uffdd\072\uffdd\001\002\000\016\002" +
    "\uffdf\007\uffdf\026\uffdf\040\uffdf\055\uffdf\072\uffdf\001\002" +
    "\000\004\055\241\001\002\000\004\055\237\001\002\000" +
    "\004\055\233\001\002\000\004\055\213\001\002\000\004" +
    "\055\142\001\002\000\004\055\107\001\002\000\020\002" +
    "\uffe1\007\uffe1\026\uffe1\040\uffe1\055\uffe1\063\104\072\uffe1" +
    "\001\002\000\016\002\uffe0\007\uffe0\026\uffe0\040\uffe0\055" +
    "\uffe0\072\uffe0\001\002\000\022\002\uffa1\004\067\006\064" +
    "\007\uffa1\026\uffa1\040\uffa1\055\uffa1\072\uffa1\001\002\000" +
    "\016\002\uffa3\007\uffa3\026\uffa3\040\uffa3\055\uffa3\072\uffa3" +
    "\001\002\000\004\055\105\001\002\000\004\021\106\001" +
    "\002\000\016\002\uffcb\007\uffcb\026\uffcb\040\uffcb\055\uffcb" +
    "\072\uffcb\001\002\000\006\023\112\024\111\001\002\000" +
    "\020\002\uffd5\007\uffd5\026\uffd5\040\uffd5\055\uffd5\057\136" +
    "\072\uffd5\001\002\000\020\002\uffdb\007\uffdb\026\uffdb\040" +
    "\uffdb\055\uffdb\057\133\072\uffdb\001\002\000\022\002\uffda" +
    "\007\uffda\026\uffda\040\uffda\055\uffda\056\114\057\113\072" +
    "\uffda\001\002\000\004\055\122\001\002\000\004\023\115" +
    "\001\002\000\024\002\uffc8\007\uffc8\026\uffc8\040\uffc8\055" +
    "\uffc8\057\uffc8\063\uffc8\070\116\072\uffc8\001\002\000\006" +
    "\023\117\071\120\001\002\000\004\071\121\001\002\000" +
    "\022\002\uffc9\007\uffc9\026\uffc9\040\uffc9\055\uffc9\057\uffc9" +
    "\063\uffc9\072\uffc9\001\002\000\022\002\uffca\007\uffca\026" +
    "\uffca\040\uffca\055\uffca\057\uffca\063\uffca\072\uffca\001\002" +
    "\000\006\021\123\024\124\001\002\000\004\057\130\001" +
    "\002\000\020\002\uffd8\007\uffd8\026\uffd8\040\uffd8\055\uffd8" +
    "\057\125\072\uffd8\001\002\000\004\055\126\001\002\000" +
    "\004\023\127\001\002\000\016\002\uffd7\007\uffd7\026\uffd7" +
    "\040\uffd7\055\uffd7\072\uffd7\001\002\000\004\055\131\001" +
    "\002\000\004\024\132\001\002\000\016\002\uffd6\007\uffd6" +
    "\026\uffd6\040\uffd6\055\uffd6\072\uffd6\001\002\000\004\055" +
    "\134\001\002\000\004\023\135\001\002\000\016\002\uffd9" +
    "\007\uffd9\026\uffd9\040\uffd9\055\uffd9\072\uffd9\001\002\000" +
    "\004\055\137\001\002\000\004\023\141\001\002\000\016" +
    "\002\uffd4\007\uffd4\026\uffd4\040\uffd4\055\uffd4\072\uffd4\001" +
    "\002\000\020\002\uffd3\007\uffd3\026\uffd3\040\uffd3\055\uffd3" +
    "\056\114\072\uffd3\001\002\000\004\015\143\001\002\000" +
    "\004\055\144\001\002\000\004\055\145\001\002\000\004" +
    "\055\146\001\002\000\004\055\147\001\002\000\004\055" +
    "\150\001\002\000\004\023\152\001\002\000\004\055\175" +
    "\001\002\000\004\063\153\001\002\000\006\021\154\023" +
    "\155\001\002\000\014\074\160\075\157\076\161\077\162" +
    "\100\156\001\002\000\014\074\160\075\157\076\161\077" +
    "\162\100\156\001\002\000\006\021\uffc4\023\uffc4\001\002" +
    "\000\006\021\uffc6\023\uffc6\001\002\000\006\021\uffc7\023" +
    "\uffc7\001\002\000\006\021\uffc5\023\uffc5\001\002\000\006" +
    "\021\uffc3\023\uffc3\001\002\000\006\021\164\023\165\001" +
    "\002\000\006\023\152\055\uffb1\001\002\000\006\023\152" +
    "\055\uffb2\001\002\000\004\055\uffb6\001\002\000\004\055" +
    "\uffb5\001\002\000\006\021\171\023\172\001\002\000\006" +
    "\023\152\055\uffb3\001\002\000\006\023\152\055\uffb0\001" +
    "\002\000\004\055\uffb4\001\002\000\004\055\uffb7\001\002" +
    "\000\004\055\176\001\002\000\004\014\177\001\002\000" +
    "\004\055\200\001\002\000\004\023\201\001\002\000\004" +
    "\055\202\001\002\000\012\064\207\065\206\066\204\067" +
    "\205\001\002\000\004\055\210\001\002\000\004\055\uffbc" +
    "\001\002\000\004\055\uffbb\001\002\000\004\055\uffbd\001" +
    "\002\000\004\055\uffbe\001\002\000\006\021\211\023\212" +
    "\001\002\000\016\002\uffac\007\uffac\026\uffac\040\uffac\055" +
    "\uffac\072\uffac\001\002\000\016\002\uffad\007\uffad\026\uffad" +
    "\040\uffad\055\uffad\072\uffad\001\002\000\004\023\216\001" +
    "\002\000\004\063\104\001\002\000\016\002\uffa8\007\uffa8" +
    "\026\uffa8\040\uffa8\055\uffa8\072\uffa8\001\002\000\006\055" +
    "\217\056\114\001\002\000\004\063\220\001\002\000\004" +
    "\055\221\001\002\000\012\021\222\022\223\023\225\024" +
    "\224\001\002\000\030\002\uffd2\007\uffd2\026\uffd2\040\uffd2" +
    "\055\uffd2\072\uffd2\074\160\075\157\076\161\077\162\100" +
    "\156\001\002\000\016\002\uffd0\007\uffd0\026\uffd0\040\uffd0" +
    "\055\uffd0\072\uffd0\001\002\000\016\002\uffd1\007\uffd1\026" +
    "\uffd1\040\uffd1\055\uffd1\072\uffd1\001\002\000\030\002\uffcc" +
    "\007\uffcc\026\uffcc\040\uffcc\055\uffcc\072\uffcc\074\160\075" +
    "\157\076\161\077\162\100\156\001\002\000\004\021\227" +
    "\001\002\000\016\002\uffcf\007\uffcf\026\uffcf\040\uffcf\055" +
    "\uffcf\072\uffcf\001\002\000\006\021\231\023\232\001\002" +
    "\000\016\002\uffcd\007\uffcd\026\uffcd\040\uffcd\055\uffcd\072" +
    "\uffcd\001\002\000\016\002\uffce\007\uffce\026\uffce\040\uffce" +
    "\055\uffce\072\uffce\001\002\000\004\023\235\001\002\000" +
    "\016\002\uffa7\007\uffa7\026\uffa7\040\uffa7\055\uffa7\072\uffa7" +
    "\001\002\000\006\055\236\056\114\001\002\000\020\002" +
    "\uffa5\007\uffa5\026\uffa5\040\uffa5\055\uffa5\063\220\072\uffa5" +
    "\001\002\000\004\023\240\001\002\000\016\002\uffe5\007" +
    "\uffe5\026\uffe5\040\uffe5\055\uffe5\072\uffe5\001\002\000\004" +
    "\023\242\001\002\000\004\055\243\001\002\000\020\002" +
    "\uffa4\007\uffa4\026\uffa4\040\uffa4\055\uffa4\063\244\072\uffa4" +
    "\001\002\000\004\055\245\001\002\000\004\052\246\001" +
    "\002\000\004\055\247\001\002\000\004\025\250\001\002" +
    "\000\004\070\251\001\002\000\004\071\252\001\002\000" +
    "\016\002\uffab\007\uffab\026\uffab\040\uffab\055\uffab\072\uffab" +
    "\001\002\000\004\023\261\001\002\000\004\055\360\001" +
    "\002\000\004\055\343\001\002\000\004\055\326\001\002" +
    "\000\004\055\311\001\002\000\004\055\274\001\002\000" +
    "\014\064\266\065\264\066\265\067\263\100\262\001\002" +
    "\000\004\021\273\001\002\000\004\021\272\001\002\000" +
    "\004\021\271\001\002\000\004\021\270\001\002\000\004" +
    "\021\267\001\002\000\004\055\uff93\001\002\000\004\055" +
    "\uff91\001\002\000\004\055\uff92\001\002\000\004\055\uff90" +
    "\001\002\000\004\055\uff94\001\002\000\004\005\275\001" +
    "\002\000\004\055\276\001\002\000\004\055\277\001\002" +
    "\000\004\055\042\001\002\000\004\072\301\001\002\000" +
    "\004\055\302\001\002\000\004\055\303\001\002\000\004" +
    "\055\304\001\002\000\004\055\305\001\002\000\004\051" +
    "\306\001\002\000\004\055\307\001\002\000\004\021\310" +
    "\001\002\000\022\002\uff9f\004\uff9f\006\uff9f\007\uff9f\026" +
    "\uff9f\040\uff9f\055\uff9f\072\uff9f\001\002\000\004\005\312" +
    "\001\002\000\004\055\313\001\002\000\004\055\314\001" +
    "\002\000\004\055\042\001\002\000\004\072\316\001\002" +
    "\000\004\055\317\001\002\000\004\055\320\001\002\000" +
    "\004\055\321\001\002\000\004\055\322\001\002\000\004" +
    "\051\323\001\002\000\004\055\324\001\002\000\004\021" +
    "\325\001\002\000\022\002\uff9e\004\uff9e\006\uff9e\007\uff9e" +
    "\026\uff9e\040\uff9e\055\uff9e\072\uff9e\001\002\000\004\005" +
    "\327\001\002\000\004\055\330\001\002\000\004\055\331" +
    "\001\002\000\004\055\042\001\002\000\004\072\333\001" +
    "\002\000\004\055\334\001\002\000\004\055\335\001\002" +
    "\000\004\055\336\001\002\000\004\055\337\001\002\000" +
    "\004\051\340\001\002\000\004\055\341\001\002\000\004" +
    "\021\342\001\002\000\022\002\uff9d\004\uff9d\006\uff9d\007" +
    "\uff9d\026\uff9d\040\uff9d\055\uff9d\072\uff9d\001\002\000\004" +
    "\005\344\001\002\000\004\055\345\001\002\000\004\055" +
    "\346\001\002\000\004\055\042\001\002\000\004\072\350" +
    "\001\002\000\004\055\351\001\002\000\004\055\352\001" +
    "\002\000\004\055\353\001\002\000\004\055\354\001\002" +
    "\000\004\051\355\001\002\000\004\055\356\001\002\000" +
    "\004\021\357\001\002\000\022\002\uff9c\004\uff9c\006\uff9c" +
    "\007\uff9c\026\uff9c\040\uff9c\055\uff9c\072\uff9c\001\002\000" +
    "\004\005\361\001\002\000\004\055\362\001\002\000\004" +
    "\055\363\001\002\000\004\055\042\001\002\000\004\072" +
    "\365\001\002\000\004\055\366\001\002\000\004\055\367" +
    "\001\002\000\004\055\370\001\002\000\004\055\371\001" +
    "\002\000\004\051\372\001\002\000\004\055\373\001\002" +
    "\000\004\021\374\001\002\000\022\002\uff9b\004\uff9b\006" +
    "\uff9b\007\uff9b\026\uff9b\040\uff9b\055\uff9b\072\uff9b\001\002" +
    "\000\004\063\376\001\002\000\004\055\377\001\002\000" +
    "\014\021\222\022\223\023\225\024\224\052\u0100\001\002" +
    "\000\004\055\u0101\001\002\000\004\025\u0102\001\002\000" +
    "\004\070\u0103\001\002\000\004\071\u0104\001\002\000\016" +
    "\002\uffaa\007\uffaa\026\uffaa\040\uffaa\055\uffaa\072\uffaa\001" +
    "\002\000\004\021\u0106\001\002\000\016\002\uffdc\007\uffdc" +
    "\026\uffdc\040\uffdc\055\uffdc\072\uffdc\001\002\000\006\023" +
    "\261\055\u010b\001\002\000\004\055\u0137\001\002\000\004" +
    "\055\u012e\001\002\000\004\055\u0125\001\002\000\004\055" +
    "\u0120\001\002\000\004\055\u0117\001\002\000\004\055\u010e" +
    "\001\002\000\004\005\u010f\001\002\000\004\055\u0110\001" +
    "\002\000\004\055\u0111\001\002\000\004\055\u0112\001\002" +
    "\000\004\055\u0113\001\002\000\004\051\u0114\001\002\000" +
    "\004\055\u0115\001\002\000\004\021\u0116\001\002\000\022" +
    "\002\uff9a\004\uff9a\006\uff9a\007\uff9a\026\uff9a\040\uff9a\055" +
    "\uff9a\072\uff9a\001\002\000\004\005\u0118\001\002\000\004" +
    "\055\u0119\001\002\000\004\055\u011a\001\002\000\004\055" +
    "\u011b\001\002\000\004\055\u011c\001\002\000\004\051\u011d" +
    "\001\002\000\004\055\u011e\001\002\000\004\021\u011f\001" +
    "\002\000\022\002\uff99\004\uff99\006\uff99\007\uff99\026\uff99" +
    "\040\uff99\055\uff99\072\uff99\001\002\000\004\055\u0121\001" +
    "\002\000\004\051\u0122\001\002\000\004\055\u0123\001\002" +
    "\000\004\021\u0124\001\002\000\022\002\uff95\004\uff95\006" +
    "\uff95\007\uff95\026\uff95\040\uff95\055\uff95\072\uff95\001\002" +
    "\000\004\005\u0126\001\002\000\004\055\u0127\001\002\000" +
    "\004\055\u0128\001\002\000\004\055\u0129\001\002\000\004" +
    "\055\u012a\001\002\000\004\051\u012b\001\002\000\004\055" +
    "\u012c\001\002\000\004\021\u012d\001\002\000\022\002\uff98" +
    "\004\uff98\006\uff98\007\uff98\026\uff98\040\uff98\055\uff98\072" +
    "\uff98\001\002\000\004\005\u012f\001\002\000\004\055\u0130" +
    "\001\002\000\004\055\u0131\001\002\000\004\055\u0132\001" +
    "\002\000\004\055\u0133\001\002\000\004\051\u0134\001\002" +
    "\000\004\055\u0135\001\002\000\004\021\u0136\001\002\000" +
    "\022\002\uff97\004\uff97\006\uff97\007\uff97\026\uff97\040\uff97" +
    "\055\uff97\072\uff97\001\002\000\004\005\u0138\001\002\000" +
    "\004\055\u0139\001\002\000\004\055\u013a\001\002\000\004" +
    "\055\u013b\001\002\000\004\055\u013c\001\002\000\004\051" +
    "\u013d\001\002\000\004\055\u013e\001\002\000\004\021\u013f" +
    "\001\002\000\022\002\uff96\004\uff96\006\uff96\007\uff96\026" +
    "\uff96\040\uff96\055\uff96\072\uff96\001\002\000\016\002\uffa2" +
    "\007\uffa2\026\uffa2\040\uffa2\055\uffa2\072\uffa2\001\002\000" +
    "\004\023\u0142\001\002\000\004\055\u0143\001\002\000\006" +
    "\014\u0145\063\u0144\001\002\000\004\055\u015e\001\002\000" +
    "\004\055\u0146\001\002\000\004\023\u0147\001\002\000\004" +
    "\055\u0148\001\002\000\012\064\207\065\206\066\204\067" +
    "\205\001\002\000\004\055\u014a\001\002\000\004\021\u014b" +
    "\001\002\000\004\055\u014c\001\002\000\012\016\u014f\017" +
    "\u0151\060\u0150\061\u014d\001\002\000\016\002\uffc1\007\uffc1" +
    "\026\uffc1\040\uffc1\055\uffc1\072\uffc1\001\002\000\004\055" +
    "\u0152\001\002\000\016\002\uffbf\007\uffbf\026\uffbf\040\uffbf" +
    "\055\uffbf\072\uffbf\001\002\000\016\002\uffc2\007\uffc2\026" +
    "\uffc2\040\uffc2\055\uffc2\072\uffc2\001\002\000\016\002\uffc0" +
    "\007\uffc0\026\uffc0\040\uffc0\055\uffc0\072\uffc0\001\002\000" +
    "\004\021\u0153\001\002\000\004\055\u0154\001\002\000\004" +
    "\015\u0155\001\002\000\004\055\u0156\001\002\000\004\055" +
    "\u0157\001\002\000\004\055\u0158\001\002\000\004\055\u0159" +
    "\001\002\000\004\055\u015a\001\002\000\004\054\u015b\001" +
    "\002\000\004\055\u015c\001\002\000\004\023\u015d\001\002" +
    "\000\016\002\uffba\007\uffba\026\uffba\040\uffba\055\uffba\072" +
    "\uffba\001\002\000\004\021\u015f\001\002\000\004\055\u0160" +
    "\001\002\000\004\014\u0161\001\002\000\004\055\u0162\001" +
    "\002\000\004\023\u0163\001\002\000\004\055\u0164\001\002" +
    "\000\012\064\207\065\206\066\204\067\205\001\002\000" +
    "\004\055\u0166\001\002\000\004\021\u0167\001\002\000\004" +
    "\055\u0168\001\002\000\004\015\u0169\001\002\000\004\055" +
    "\u016a\001\002\000\004\055\u016b\001\002\000\004\055\u016c" +
    "\001\002\000\004\055\u016d\001\002\000\004\055\u016e\001" +
    "\002\000\004\054\u016f\001\002\000\004\055\u0170\001\002" +
    "\000\004\023\u0171\001\002\000\004\055\u0172\001\002\000" +
    "\004\055\u0173\001\002\000\004\055\u0174\001\002\000\004" +
    "\055\u0175\001\002\000\004\055\u0176\001\002\000\004\023" +
    "\u0177\001\002\000\004\055\u0178\001\002\000\004\063\u0179" +
    "\001\002\000\004\055\u017a\001\002\000\004\023\u017b\001" +
    "\002\000\024\016\u014f\017\u0151\060\u0150\061\u014d\074\160" +
    "\075\157\076\161\077\162\100\156\001\002\000\016\002" +
    "\uffb8\007\uffb8\026\uffb8\040\uffb8\055\uffb8\072\uffb8\001\002" +
    "\000\004\021\u017e\001\002\000\016\002\uffb9\007\uffb9\026" +
    "\uffb9\040\uffb9\055\uffb9\072\uffb9\001\002\000\004\023\u0181" +
    "\001\002\000\016\002\uffa9\007\uffa9\026\uffa9\040\uffa9\055" +
    "\uffa9\072\uffa9\001\002\000\006\055\u0182\056\114\001\002" +
    "\000\020\002\uffa6\007\uffa6\026\uffa6\040\uffa6\055\uffa6\063" +
    "\220\072\uffa6\001\002\000\004\055\u0184\001\002\000\004" +
    "\055\u0185\001\002\000\004\055\u0186\001\002\000\004\055" +
    "\u0187\001\002\000\004\023\152\001\002\000\004\055\u0189" +
    "\001\002\000\004\055\u018a\001\002\000\004\014\u018b\001" +
    "\002\000\004\055\u018c\001\002\000\004\023\u018d\001\002" +
    "\000\004\055\u018e\001\002\000\012\064\207\065\206\066" +
    "\204\067\205\001\002\000\004\055\u0190\001\002\000\006" +
    "\021\u0191\023\u0192\001\002\000\016\002\uffae\007\uffae\026" +
    "\uffae\040\uffae\055\uffae\072\uffae\001\002\000\016\002\uffaf" +
    "\007\uffaf\026\uffaf\040\uffaf\055\uffaf\072\uffaf\001\002\000" +
    "\010\007\uffed\026\uffed\055\u0194\001\002\000\004\055\u0195" +
    "\001\002\000\004\055\042\001\002\000\004\072\u0197\001" +
    "\002\000\004\055\046\001\002\000\006\007\uffee\026\uffee" +
    "\001\002\000\010\007\uffef\026\uffef\055\u019a\001\002\000" +
    "\004\055\u019b\001\002\000\004\055\042\001\002\000\004" +
    "\072\u019d\001\002\000\004\055\u019e\001\002\000\004\055" +
    "\u01a0\001\002\000\006\007\ufff0\026\ufff0\001\002\000\010" +
    "\030\033\031\034\032\031\001\002\000\010\007\ufff3\026" +
    "\ufff3\055\u01a2\001\002\000\004\055\u01a3\001\002\000\004" +
    "\055\042\001\002\000\004\072\u01a5\001\002\000\004\055" +
    "\u019e\001\002\000\006\007\ufff4\026\ufff4\001\002\000\010" +
    "\007\uffeb\026\uffeb\055\u01a8\001\002\000\004\055\u01a9\001" +
    "\002\000\004\055\042\001\002\000\004\072\u01ab\001\002" +
    "\000\004\055\046\001\002\000\006\007\uffec\026\uffec\001" +
    "\002\000\010\007\ufff1\026\ufff1\055\u01ae\001\002\000\004" +
    "\055\u01af\001\002\000\004\055\042\001\002\000\004\072" +
    "\u01b1\001\002\000\004\055\u019e\001\002\000\006\007\ufff2" +
    "\026\ufff2\001\002\000\004\002\000\001\002\000\012\002" +
    "\ufffa\007\ufffa\026\ufffa\040\ufffa\001\002\000\004\037\u01b6" +
    "\001\002\000\004\070\u01b7\001\002\000\004\071\u01b8\001" +
    "\002\000\004\055\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b6\000\020\002\005\003\013\004\014\005\007\006" +
    "\012\007\011\022\004\001\001\000\002\001\001\000\006" +
    "\023\u01b3\024\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\021\022\004\001\001\000\002\001\001" +
    "\000\006\005\016\007\011\001\001\000\002\001\001\000" +
    "\020\002\015\003\013\004\014\005\007\006\012\007\011" +
    "\022\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\025\011\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\043\024\042\001\001\000\002\001\001\000\006\023\050" +
    "\024\042\001\001\000\002\001\001\000\004\011\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\100\013\101\014\062\025" +
    "\060\026\052\027\054\030\055\031\077\032\067\036\070" +
    "\040\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\u013f\013\101\014\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\102\013\101\014\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\167" +
    "\001\001\000\004\035\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\166\001\001\000" +
    "\004\037\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\173\001\001\000\004\037" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\214\031\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\233\031\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\257\016\256\017\255\020\254\021\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\277\024\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\314\024\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\331\024" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\346\024\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\363\024\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\u010c" +
    "\016\u010b\017\u0109\020\u0108\021\u0107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\u0148\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u014d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\u0164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\u017b\035" +
    "\u017c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\u017f\031\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\u0187\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\u018e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\u0195\024\042" +
    "\001\001\000\002\001\001\000\004\011\u0197\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\u019b\024\042\001\001\000\002\001\001\000\004\010" +
    "\u019e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\u01a3\024\042\001\001\000\002\001\001\000\004\010\u01a5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\u01a9\024\042\001\001\000\002\001\001" +
    "\000\004\011\u01ab\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\u01af\024\042\001\001" +
    "\000\002\001\001\000\004\010\u01b1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public ArrayList<String> SyntacticErrors = new ArrayList<String>();

public void syntax_error( Symbol s )
{
    System.out.println("Error de Sintaxis en: " +s.value );    
    System.out.println( "Linea " + s.left );
    System.out.println( "Columna " + s.right );
    SyntacticErrors.add("* Error Sintactico. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' * Mensaje Error: Simbolo no reconocido.");
}

public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception
{

}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // LOOP ::= LineaC LOOP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOOP",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= LOOP EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LOOP ::= LineaC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOOP",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LineaC ::= Import_lib 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaC",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LineaC ::= Gramar_clase FuncPrin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaC",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LineaC ::= FuncPrin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaC",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Import_lib ::= IMP SPC CADTXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Import_lib",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FuncPrin ::= DeclPrin CodSuelt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncPrin",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclPrin ::= INT SPC METPRIN PIZ PDR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DeclPrin",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Gramar_clase ::= Decl_clase Gramar_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Gramar_clase",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Gramar_clase ::= Decl_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Gramar_clase",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decl_clase ::= CL SPC NMCL Prop_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl_clase",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decl_clase ::= CL SPC NMCL Metod_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl_clase",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Prop_clase ::= SPC SPC CLPRPU DSP SPC SPC CodSuelt FLC Prop_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prop_clase",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Prop_clase ::= SPC SPC CLPRPU DSP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prop_clase",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Prop_clase ::= SPC SPC CLPRPV DSP SPC SPC CodSuelt FLC Prop_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prop_clase",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Prop_clase ::= SPC SPC CLPRPV DSP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prop_clase",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Prop_clase ::= SPC SPC CLPRPT DSP SPC SPC CodSuelt FLC Prop_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prop_clase",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Prop_clase ::= SPC SPC CLPRPT DSP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prop_clase",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Metod_clase ::= SPC SPC CLMTPU DSP SPC SPC CodSuelt FLC Metod_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Metod_clase",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Metod_clase ::= SPC SPC CLMTPU DSP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Metod_clase",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Metod_clase ::= SPC SPC CLMTPV DSP SPC SPC CodSuelt FLC Metod_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Metod_clase",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Metod_clase ::= SPC SPC CLMTPV DSP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Metod_clase",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Metod_clase ::= SPC SPC CLMTPT DSP SPC SPC CodSuelt FLC Metod_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Metod_clase",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Metod_clase ::= SPC SPC CLMTPT DSP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Metod_clase",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CodSuelt ::= Pinea CodSuelt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CodSuelt",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CodSuelt ::= Pinea 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CodSuelt",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Pinea ::= SPC SPC Salida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Pinea ::= SPC SPC RD SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Pinea ::= SPC SPC Retor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Pinea ::= SPC SPC Asign 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Pinea ::= SPC SPC Declar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Pinea ::= SPC SPC Metodo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Pinea ::= SPC SPC STRUC_if 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Pinea ::= SPC SPC ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Pinea ::= SPC SPC ESTRUCTURA_DO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Pinea ::= SPC SPC ESTRUCTURA_INSTANCIAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Retor ::= RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Retor",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Salida ::= WT SPC CADTXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Salida ::= WT SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Salida ::= WT SPC CADTXT COMA SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Salida ::= WT SPC IDEN COMA SPC CADTXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Salida ::= WT SPC IDEN COMA SPC CADTXT COMA SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Salida ::= WT SPC IDEN COMA SPC NUM COMA SPC CADTXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Salida ::= WT SPC Metodo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Salida ::= WT SPC Metodo COMA SPC Metodo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Salida ::= WT SPC Metodo COMA SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Asign ::= IDEN SPC EQ SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Asign ::= IDEN SPC EQ SPC CADTXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Asign ::= IDEN SPC EQ SPC NUMR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Asign ::= IDEN SPC EQ SPC IDEN OPERACIONES_ARITMETICAS NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Asign ::= IDEN SPC EQ SPC NUM OPERACIONES_ARITMETICAS IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Asign ::= IDEN SPC EQ SPC NUM OPERACIONES_ARITMETICAS NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Asign ::= IDEN SPC EQ SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Asign ::= Metodo EQ SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Metodo ::= IDEN P IDEN PIZ IDEN PDR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Metodo",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Metodo ::= IDEN P IDEN PIZ PDR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Metodo",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Metodo ::= IDEN P IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Metodo",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACIONES_ARITMETICAS ::= SUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_ARITMETICAS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACIONES_ARITMETICAS ::= RES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_ARITMETICAS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACIONES_ARITMETICAS ::= MUL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_ARITMETICAS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACIONES_ARITMETICAS ::= MOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_ARITMETICAS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACIONES_ARITMETICAS ::= DIV 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_ARITMETICAS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACIONES_CICLOS ::= INCR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CICLOS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACIONES_CICLOS ::= DECR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CICLOS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACIONES_CICLOS ::= FRDEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CICLOS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACIONES_CICLOS ::= FRINC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CICLOS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SIGNOS_COMPARACION ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SIGNOS_COMPARACION ::= NEQ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SIGNOS_COMPARACION ::= MYQ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SIGNOS_COMPARACION ::= MNQ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ESTRUCTURA_FOR ::= FRD SPC IDEN SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM SPC OPERACIONES_CICLOS SPC NUM SPC FRH SPC SPC SPC SPC SPC WT SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-24)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ESTRUCTURA_FOR ::= FRD SPC IDEN SPC EQ SPC NUM SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM SPC FRH SPC SPC SPC SPC SPC WT SPC IDEN SPC SPC SPC SPC SPC IDEN SPC EQ SPC IDEN OPERACIONES_ARITMETICAS NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-36)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ESTRUCTURA_FOR ::= FRD SPC IDEN SPC EQ SPC NUM SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM SPC FRH SPC SPC SPC SPC SPC WT SPC IDEN SPC SPC SPC SPC SPC IDEN SPC EQ SPC IDEN OPERACIONES_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-35)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACIONES_DO ::= IDEN EQ NUM OPERACIONES_ARITMETICAS NUM OPERACIONES_DO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACIONES_DO ::= IDEN EQ IDEN OPERACIONES_ARITMETICAS IDEN OPERACIONES_DO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERACIONES_DO ::= IDEN EQ IDEN OPERACIONES_ARITMETICAS NUM OPERACIONES_DO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACIONES_DO ::= IDEN EQ NUM OPERACIONES_ARITMETICAS IDEN OPERACIONES_DO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACIONES_DO ::= IDEN EQ NUM OPERACIONES_ARITMETICAS NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERACIONES_DO ::= IDEN EQ IDEN OPERACIONES_ARITMETICAS IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACIONES_DO ::= IDEN EQ IDEN OPERACIONES_ARITMETICAS NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERACIONES_DO ::= IDEN EQ NUM OPERACIONES_ARITMETICAS IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ESTRUCTURA_DO ::= FRH SPC SPC SPC SPC SPC OPERACIONES_DO SPC SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ESTRUCTURA_DO ::= FRH SPC SPC SPC SPC SPC OPERACIONES_DO SPC SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ESTRUCTURA_DO ::= SPC SPC FRH SPC SPC SPC SPC SPC OPERACIONES_DO SPC SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ESTRUCTURA_DO ::= SPC SPC FRH SPC SPC SPC SPC SPC OPERACIONES_DO SPC SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ESTRUCTURA_INSTANCIAR ::= NMCL SPC IDEN SPC EQ SPC CLIN SPC NMCL PIZ PDR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_INSTANCIAR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ESTRUCTURA_INSTANCIAR ::= IDEN SPC EQ SPC CLIN SPC NMCL PIZ PDR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_INSTANCIAR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Declar ::= INT SPC Asign 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declar",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Declar ::= FLOAT SPC Asign 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declar",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Declar ::= STRING SPC Asign 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declar",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Declar ::= INT SPC IDEN SPC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declar",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Declar ::= STRING SPC IDEN SPC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declar",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Declar ::= NMCL SPC IDEN SPC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declar",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // STRUC_if ::= ifU STRUC_if 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STRUC_if",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // STRUC_if ::= ifELS STRUC_if 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STRUC_if",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // STRUC_if ::= ifU 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STRUC_if",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // STRUC_if ::= ifELS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STRUC_if",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ifU ::= IF SPC cond1 SPC THN SPC SPC CodSuelt FLC SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifU",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ifU ::= IF SPC cond2 SPC THN SPC SPC CodSuelt FLC SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifU",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ifU ::= IF SPC cond3 SPC THN SPC SPC CodSuelt FLC SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifU",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ifU ::= IF SPC cond4 SPC THN SPC SPC CodSuelt FLC SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifU",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ifU ::= IF SPC cond5 SPC THN SPC SPC CodSuelt FLC SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifU",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ifELS ::= ELS SPC cond1 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifELS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ifELS ::= ELS SPC cond2 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifELS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ifELS ::= ELS SPC cond3 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifELS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ifELS ::= ELS SPC cond4 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifELS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ifELS ::= ELS SPC cond5 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifELS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ifELS ::= ELS SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifELS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cond1 ::= IDEN MOD NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond1",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cond2 ::= IDEN EQEQ NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond2",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cond3 ::= IDEN NEQ NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond3",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cond4 ::= IDEN MYQ NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond4",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cond5 ::= IDEN MNQ NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond5",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
