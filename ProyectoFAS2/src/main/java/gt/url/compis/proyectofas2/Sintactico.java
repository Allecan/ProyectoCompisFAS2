
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.url.compis.proyectofas2;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\006\004\000\002\026\007\000\002\027\004\000" +
    "\002\027\003\000\002\030\005\000\002\030\007\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\031\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\010\000\002\032\010\000\002" +
    "\032\013\000\002\032\005\000\002\032\010\000\002\033" +
    "\007\000\002\033\007\000\002\033\007\000\002\033\011" +
    "\000\002\033\011\000\002\033\007\000\002\033\006\000" +
    "\002\035\010\000\002\035\007\000\002\035\005\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\041\033\000\002\041\047\000\002\041\046\000\002\042" +
    "\010\000\002\042\010\000\002\042\010\000\002\042\010" +
    "\000\002\042\007\000\002\042\007\000\002\042\007\000" +
    "\002\042\007\000\002\043\022\000\002\043\022\000\002" +
    "\043\024\000\002\043\024\000\002\007\015\000\002\007" +
    "\013\000\002\034\005\000\002\034\005\000\002\034\006" +
    "\000\002\016\004\000\002\016\004\000\002\016\003\000" +
    "\002\016\003\000\002\017\016\000\002\017\016\000\002" +
    "\017\016\000\002\017\016\000\002\017\016\000\002\020" +
    "\016\000\002\020\016\000\002\020\016\000\002\020\016" +
    "\000\002\020\016\000\002\020\012\000\002\021\005\000" +
    "\002\022\005\000\002\023\005\000\002\024\005\000\002" +
    "\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015e\000\004\007\012\001\002\000\006\002\ufffe\007" +
    "\ufffe\001\002\000\006\002\uffff\007\012\001\002\000\004" +
    "\055\020\001\002\000\004\002\017\001\002\000\006\002" +
    "\ufffc\007\ufffc\001\002\000\006\002\ufffd\007\ufffd\001\002" +
    "\000\004\055\013\001\002\000\004\037\014\001\002\000" +
    "\004\070\015\001\002\000\004\071\016\001\002\000\004" +
    "\055\ufffa\001\002\000\004\002\000\001\002\000\004\055" +
    "\024\001\002\000\010\002\ufff8\007\ufff8\055\020\001\002" +
    "\000\006\002\ufffb\007\ufffb\001\002\000\006\002\ufff9\007" +
    "\ufff9\001\002\000\032\004\041\006\036\007\032\012\046" +
    "\013\034\015\031\023\040\025\044\051\037\053\045\054" +
    "\050\055\047\001\002\000\010\002\uffef\007\uffef\055\uffef" +
    "\001\002\000\010\002\ufff4\007\ufff4\055\ufff4\001\002\000" +
    "\010\002\ufff7\007\ufff7\055\ufff7\001\002\000\010\002\ufff3" +
    "\007\ufff3\055\ufff3\001\002\000\004\055\u0150\001\002\000" +
    "\004\055\u014c\001\002\000\010\002\ufff5\007\ufff5\055\ufff5" +
    "\001\002\000\004\055\u010e\001\002\000\014\002\uffb7\004" +
    "\041\006\036\007\uffb7\055\uffb7\001\002\000\004\055\324" +
    "\001\002\000\004\055\322\001\002\000\006\055\312\056" +
    "\065\001\002\000\004\055\214\001\002\000\010\002\ufff0" +
    "\007\ufff0\055\ufff0\001\002\000\010\002\uffee\007\uffee\055" +
    "\uffee\001\002\000\004\055\202\001\002\000\004\055\200" +
    "\001\002\000\004\055\161\001\002\000\004\055\110\001" +
    "\002\000\004\055\060\001\002\000\012\002\ufff2\007\ufff2" +
    "\055\ufff2\063\055\001\002\000\010\002\ufff1\007\ufff1\055" +
    "\ufff1\001\002\000\014\002\uffb8\004\041\006\036\007\uffb8" +
    "\055\uffb8\001\002\000\010\002\uffba\007\uffba\055\uffba\001" +
    "\002\000\004\055\056\001\002\000\004\021\057\001\002" +
    "\000\010\002\uffdf\007\uffdf\055\uffdf\001\002\000\006\023" +
    "\063\024\062\001\002\000\012\002\uffe7\007\uffe7\055\uffe7" +
    "\057\104\001\002\000\012\002\uffec\007\uffec\055\uffec\057" +
    "\101\001\002\000\014\002\uffeb\007\uffeb\055\uffeb\056\065" +
    "\057\064\001\002\000\004\055\073\001\002\000\004\023" +
    "\066\001\002\000\016\002\uffdc\007\uffdc\055\uffdc\057\uffdc" +
    "\063\uffdc\070\067\001\002\000\006\023\070\071\071\001" +
    "\002\000\004\071\072\001\002\000\014\002\uffdd\007\uffdd" +
    "\055\uffdd\057\uffdd\063\uffdd\001\002\000\014\002\uffde\007" +
    "\uffde\055\uffde\057\uffde\063\uffde\001\002\000\006\021\074" +
    "\024\075\001\002\000\004\057\076\001\002\000\010\002" +
    "\uffe9\007\uffe9\055\uffe9\001\002\000\004\055\077\001\002" +
    "\000\004\024\100\001\002\000\010\002\uffe8\007\uffe8\055" +
    "\uffe8\001\002\000\004\055\102\001\002\000\004\023\103" +
    "\001\002\000\010\002\uffea\007\uffea\055\uffea\001\002\000" +
    "\004\055\105\001\002\000\004\023\107\001\002\000\010" +
    "\002\uffe6\007\uffe6\055\uffe6\001\002\000\004\056\065\001" +
    "\002\000\004\015\111\001\002\000\004\055\112\001\002" +
    "\000\004\055\113\001\002\000\004\055\114\001\002\000" +
    "\004\055\115\001\002\000\004\055\116\001\002\000\004" +
    "\023\120\001\002\000\004\055\143\001\002\000\004\063" +
    "\121\001\002\000\006\021\122\023\123\001\002\000\014" +
    "\074\126\075\125\076\127\077\130\100\124\001\002\000" +
    "\014\074\126\075\125\076\127\077\130\100\124\001\002" +
    "\000\006\021\uffd8\023\uffd8\001\002\000\006\021\uffda\023" +
    "\uffda\001\002\000\006\021\uffdb\023\uffdb\001\002\000\006" +
    "\021\uffd9\023\uffd9\001\002\000\006\021\uffd7\023\uffd7\001" +
    "\002\000\006\021\132\023\133\001\002\000\006\023\120" +
    "\055\uffc5\001\002\000\006\023\120\055\uffc6\001\002\000" +
    "\004\055\uffca\001\002\000\004\055\uffc9\001\002\000\006" +
    "\021\137\023\140\001\002\000\006\023\120\055\uffc7\001" +
    "\002\000\006\023\120\055\uffc4\001\002\000\004\055\uffc8" +
    "\001\002\000\004\055\uffcb\001\002\000\004\055\144\001" +
    "\002\000\004\014\145\001\002\000\004\055\146\001\002" +
    "\000\004\023\147\001\002\000\004\055\150\001\002\000" +
    "\012\064\155\065\153\066\154\067\152\001\002\000\004" +
    "\055\156\001\002\000\004\055\uffcf\001\002\000\004\055" +
    "\uffd1\001\002\000\004\055\uffd0\001\002\000\004\055\uffd2" +
    "\001\002\000\006\021\157\023\160\001\002\000\010\002" +
    "\uffc0\007\uffc0\055\uffc0\001\002\000\010\002\uffc1\007\uffc1" +
    "\055\uffc1\001\002\000\004\023\164\001\002\000\004\063" +
    "\055\001\002\000\010\002\uffbc\007\uffbc\055\uffbc\001\002" +
    "\000\006\055\165\056\065\001\002\000\004\063\166\001" +
    "\002\000\004\055\167\001\002\000\012\021\170\022\171" +
    "\023\173\024\172\001\002\000\012\002\uffe5\007\uffe5\055" +
    "\uffe5\074\176\001\002\000\010\002\uffe3\007\uffe3\055\uffe3" +
    "\001\002\000\010\002\uffe4\007\uffe4\055\uffe4\001\002\000" +
    "\012\002\uffe0\007\uffe0\055\uffe0\074\174\001\002\000\004" +
    "\021\175\001\002\000\010\002\uffe2\007\uffe2\055\uffe2\001" +
    "\002\000\004\023\177\001\002\000\010\002\uffe1\007\uffe1" +
    "\055\uffe1\001\002\000\004\023\201\001\002\000\010\002" +
    "\ufff6\007\ufff6\055\ufff6\001\002\000\004\023\203\001\002" +
    "\000\004\055\204\001\002\000\004\063\205\001\002\000" +
    "\004\055\206\001\002\000\004\052\207\001\002\000\004" +
    "\055\210\001\002\000\004\025\211\001\002\000\004\070" +
    "\212\001\002\000\004\071\213\001\002\000\010\002\uffbf" +
    "\007\uffbf\055\uffbf\001\002\000\004\023\222\001\002\000" +
    "\004\055\301\001\002\000\004\055\270\001\002\000\004" +
    "\055\257\001\002\000\004\055\246\001\002\000\004\055" +
    "\235\001\002\000\014\064\227\065\224\066\225\067\226" +
    "\100\223\001\002\000\004\021\234\001\002\000\004\021" +
    "\233\001\002\000\004\021\232\001\002\000\004\021\231" +
    "\001\002\000\004\021\230\001\002\000\004\055\uffaa\001" +
    "\002\000\004\055\uffa7\001\002\000\004\055\uffa8\001\002" +
    "\000\004\055\uffa9\001\002\000\004\055\uffab\001\002\000" +
    "\004\005\236\001\002\000\004\055\237\001\002\000\004" +
    "\055\240\001\002\000\004\055\241\001\002\000\004\055" +
    "\242\001\002\000\004\051\243\001\002\000\004\055\244" +
    "\001\002\000\004\021\245\001\002\000\014\002\uffb6\004" +
    "\uffb6\006\uffb6\007\uffb6\055\uffb6\001\002\000\004\005\247" +
    "\001\002\000\004\055\250\001\002\000\004\055\251\001" +
    "\002\000\004\055\252\001\002\000\004\055\253\001\002" +
    "\000\004\051\254\001\002\000\004\055\255\001\002\000" +
    "\004\021\256\001\002\000\014\002\uffb5\004\uffb5\006\uffb5" +
    "\007\uffb5\055\uffb5\001\002\000\004\005\260\001\002\000" +
    "\004\055\261\001\002\000\004\055\262\001\002\000\004" +
    "\055\263\001\002\000\004\055\264\001\002\000\004\051" +
    "\265\001\002\000\004\055\266\001\002\000\004\021\267" +
    "\001\002\000\014\002\uffb4\004\uffb4\006\uffb4\007\uffb4\055" +
    "\uffb4\001\002\000\004\005\271\001\002\000\004\055\272" +
    "\001\002\000\004\055\273\001\002\000\004\055\274\001" +
    "\002\000\004\055\275\001\002\000\004\051\276\001\002" +
    "\000\004\055\277\001\002\000\004\021\300\001\002\000" +
    "\014\002\uffb3\004\uffb3\006\uffb3\007\uffb3\055\uffb3\001\002" +
    "\000\004\005\302\001\002\000\004\055\303\001\002\000" +
    "\004\055\304\001\002\000\004\055\305\001\002\000\004" +
    "\055\306\001\002\000\004\051\307\001\002\000\004\055" +
    "\310\001\002\000\004\021\311\001\002\000\014\002\uffb2" +
    "\004\uffb2\006\uffb2\007\uffb2\055\uffb2\001\002\000\004\063" +
    "\313\001\002\000\004\055\314\001\002\000\014\021\170" +
    "\022\171\023\173\024\172\052\315\001\002\000\004\055" +
    "\316\001\002\000\004\025\317\001\002\000\004\070\320" +
    "\001\002\000\004\071\321\001\002\000\010\002\uffbe\007" +
    "\uffbe\055\uffbe\001\002\000\004\021\323\001\002\000\010" +
    "\002\uffed\007\uffed\055\uffed\001\002\000\006\023\222\055" +
    "\330\001\002\000\004\055\u0104\001\002\000\004\055\373" +
    "\001\002\000\004\055\362\001\002\000\004\055\355\001" +
    "\002\000\004\055\344\001\002\000\004\055\333\001\002" +
    "\000\004\005\334\001\002\000\004\055\335\001\002\000" +
    "\004\055\336\001\002\000\004\055\337\001\002\000\004" +
    "\055\340\001\002\000\004\051\341\001\002\000\004\055" +
    "\342\001\002\000\004\021\343\001\002\000\014\002\uffb1" +
    "\004\uffb1\006\uffb1\007\uffb1\055\uffb1\001\002\000\004\005" +
    "\345\001\002\000\004\055\346\001\002\000\004\055\347" +
    "\001\002\000\004\055\350\001\002\000\004\055\351\001" +
    "\002\000\004\051\352\001\002\000\004\055\353\001\002" +
    "\000\004\021\354\001\002\000\014\002\uffb0\004\uffb0\006" +
    "\uffb0\007\uffb0\055\uffb0\001\002\000\004\055\356\001\002" +
    "\000\004\051\357\001\002\000\004\055\360\001\002\000" +
    "\004\021\361\001\002\000\014\002\uffac\004\uffac\006\uffac" +
    "\007\uffac\055\uffac\001\002\000\004\005\363\001\002\000" +
    "\004\055\364\001\002\000\004\055\365\001\002\000\004" +
    "\055\366\001\002\000\004\055\367\001\002\000\004\051" +
    "\370\001\002\000\004\055\371\001\002\000\004\021\372" +
    "\001\002\000\014\002\uffaf\004\uffaf\006\uffaf\007\uffaf\055" +
    "\uffaf\001\002\000\004\005\374\001\002\000\004\055\375" +
    "\001\002\000\004\055\376\001\002\000\004\055\377\001" +
    "\002\000\004\055\u0100\001\002\000\004\051\u0101\001\002" +
    "\000\004\055\u0102\001\002\000\004\021\u0103\001\002\000" +
    "\014\002\uffae\004\uffae\006\uffae\007\uffae\055\uffae\001\002" +
    "\000\004\005\u0105\001\002\000\004\055\u0106\001\002\000" +
    "\004\055\u0107\001\002\000\004\055\u0108\001\002\000\004" +
    "\055\u0109\001\002\000\004\051\u010a\001\002\000\004\055" +
    "\u010b\001\002\000\004\021\u010c\001\002\000\014\002\uffad" +
    "\004\uffad\006\uffad\007\uffad\055\uffad\001\002\000\010\002" +
    "\uffb9\007\uffb9\055\uffb9\001\002\000\004\023\u010f\001\002" +
    "\000\004\055\u0110\001\002\000\006\014\u0112\063\u0111\001" +
    "\002\000\004\055\u012b\001\002\000\004\055\u0113\001\002" +
    "\000\004\023\u0114\001\002\000\004\055\u0115\001\002\000" +
    "\012\064\155\065\153\066\154\067\152\001\002\000\004" +
    "\055\u0117\001\002\000\004\021\u0118\001\002\000\004\055" +
    "\u0119\001\002\000\012\016\u011c\017\u011e\060\u011d\061\u011a" +
    "\001\002\000\010\002\uffd5\007\uffd5\055\uffd5\001\002\000" +
    "\004\055\u011f\001\002\000\010\002\uffd3\007\uffd3\055\uffd3" +
    "\001\002\000\010\002\uffd6\007\uffd6\055\uffd6\001\002\000" +
    "\010\002\uffd4\007\uffd4\055\uffd4\001\002\000\004\021\u0120" +
    "\001\002\000\004\055\u0121\001\002\000\004\015\u0122\001" +
    "\002\000\004\055\u0123\001\002\000\004\055\u0124\001\002" +
    "\000\004\055\u0125\001\002\000\004\055\u0126\001\002\000" +
    "\004\055\u0127\001\002\000\004\054\u0128\001\002\000\004" +
    "\055\u0129\001\002\000\004\023\u012a\001\002\000\010\002" +
    "\uffce\007\uffce\055\uffce\001\002\000\004\021\u012c\001\002" +
    "\000\004\055\u012d\001\002\000\004\014\u012e\001\002\000" +
    "\004\055\u012f\001\002\000\004\023\u0130\001\002\000\004" +
    "\055\u0131\001\002\000\012\064\155\065\153\066\154\067" +
    "\152\001\002\000\004\055\u0133\001\002\000\004\021\u0134" +
    "\001\002\000\004\055\u0135\001\002\000\004\015\u0136\001" +
    "\002\000\004\055\u0137\001\002\000\004\055\u0138\001\002" +
    "\000\004\055\u0139\001\002\000\004\055\u013a\001\002\000" +
    "\004\055\u013b\001\002\000\004\054\u013c\001\002\000\004" +
    "\055\u013d\001\002\000\004\023\u013e\001\002\000\004\055" +
    "\u013f\001\002\000\004\055\u0140\001\002\000\004\055\u0141" +
    "\001\002\000\004\055\u0142\001\002\000\004\055\u0143\001" +
    "\002\000\004\023\u0144\001\002\000\004\055\u0145\001\002" +
    "\000\004\063\u0146\001\002\000\004\055\u0147\001\002\000" +
    "\004\023\u0148\001\002\000\024\016\u011c\017\u011e\060\u011d" +
    "\061\u011a\074\126\075\125\076\127\077\130\100\124\001" +
    "\002\000\010\002\uffcc\007\uffcc\055\uffcc\001\002\000\004" +
    "\021\u014b\001\002\000\010\002\uffcd\007\uffcd\055\uffcd\001" +
    "\002\000\004\023\u014e\001\002\000\010\002\uffbd\007\uffbd" +
    "\055\uffbd\001\002\000\006\055\u014f\056\065\001\002\000" +
    "\012\002\uffbb\007\uffbb\055\uffbb\063\166\001\002\000\004" +
    "\055\u0151\001\002\000\004\055\u0152\001\002\000\004\055" +
    "\u0153\001\002\000\004\055\u0154\001\002\000\004\023\120" +
    "\001\002\000\004\055\u0156\001\002\000\004\055\u0157\001" +
    "\002\000\004\014\u0158\001\002\000\004\055\u0159\001\002" +
    "\000\004\023\u015a\001\002\000\004\055\u015b\001\002\000" +
    "\012\064\155\065\153\066\154\067\152\001\002\000\004" +
    "\055\u015d\001\002\000\006\021\u015e\023\u015f\001\002\000" +
    "\010\002\uffc2\007\uffc2\055\uffc2\001\002\000\010\002\uffc3" +
    "\007\uffc3\055\uffc3\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015e\000\016\002\006\003\004\004\003\005\010\006" +
    "\007\026\005\001\001\000\002\001\001\000\016\002\u015f" +
    "\003\004\004\003\005\010\006\007\026\005\001\001\000" +
    "\006\027\021\030\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\022\030" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\007\042\016\051\017\052\020\034\031\032\032\026\033" +
    "\025\034\027\035\050\041\041\043\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\u010c\017\052\020\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\053\017\052\020\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\135\001\001\000\004\040\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\134\001\001\000\004\042\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\141\001" +
    "\001\000\004\042\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\162\035" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\021\220\022\217\023\216\024\215" +
    "\025\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\331\022\330\023\326\024\325\025" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\u0115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\u011a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\u0131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\u0148\040\u0149\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\u014c\035" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\u0154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\u015b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error( Symbol s )
{
    System.out.println("Error de Sintaxis en: " +s.value );    
    System.out.println( "Linea " + s.left );
    System.out.println( "Columna " + s.right );
}

public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception
{

}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // LOOP ::= LineaC LOOP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOOP",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= LOOP EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LOOP ::= LineaC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOOP",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LineaC ::= Import_lib 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaC",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LineaC ::= Gramar_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaC",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LineaC ::= FuncPrin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaC",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FuncPrin ::= DeclPrin CodSuelt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncPrin",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclPrin ::= INT SPC METPRIN PIZ PDR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DeclPrin",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CodSuelt ::= Pinea CodSuelt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CodSuelt",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CodSuelt ::= Pinea 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CodSuelt",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Pinea ::= SPC SPC Salida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Pinea ::= SPC SPC RD SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Pinea ::= SPC SPC Retor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Pinea ::= SPC SPC Asign 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Pinea ::= SPC SPC Declar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Pinea ::= SPC SPC Metodo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Pinea ::= SPC SPC STRUC_if 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Pinea ::= SPC SPC ESTRUCTURA_FOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Pinea ::= SPC SPC ESTRUCTURA_DO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Pinea ::= SPC SPC ESTRUCTURA_INSTANCIAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Pinea",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Retor ::= RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Retor",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Salida ::= WT SPC CADTXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Salida ::= WT SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Salida ::= WT SPC CADTXT COMA SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Salida ::= WT SPC IDEN COMA SPC CADTXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Salida ::= WT SPC IDEN COMA SPC NUM COMA SPC CADTXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Salida ::= WT SPC Metodo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Salida ::= WT SPC Metodo COMA SPC Metodo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Salida",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Asign ::= IDEN SPC EQ SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Asign ::= IDEN SPC EQ SPC CADTXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Asign ::= IDEN SPC EQ SPC NUMR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Asign ::= IDEN SPC EQ SPC IDEN SUM NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Asign ::= IDEN SPC EQ SPC NUM SUM IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Asign ::= IDEN SPC EQ SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Asign ::= Metodo EQ SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asign",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Metodo ::= IDEN P IDEN PIZ IDEN PDR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Metodo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Metodo ::= IDEN P IDEN PIZ PDR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Metodo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Metodo ::= IDEN P IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Metodo",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACIONES_ARITMETICAS ::= SUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACIONES_ARITMETICAS ::= RES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACIONES_ARITMETICAS ::= MUL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACIONES_ARITMETICAS ::= MOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACIONES_ARITMETICAS ::= DIV 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACIONES_CICLOS ::= INCR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CICLOS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACIONES_CICLOS ::= DECR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CICLOS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACIONES_CICLOS ::= FRDEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CICLOS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACIONES_CICLOS ::= FRINC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_CICLOS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SIGNOS_COMPARACION ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_COMPARACION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIGNOS_COMPARACION ::= NEQ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_COMPARACION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SIGNOS_COMPARACION ::= MYQ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_COMPARACION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SIGNOS_COMPARACION ::= MNQ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_COMPARACION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ESTRUCTURA_FOR ::= FRD SPC IDEN SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM SPC OPERACIONES_CICLOS SPC NUM SPC FRH SPC SPC SPC SPC SPC WT SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-24)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ESTRUCTURA_FOR ::= FRD SPC IDEN SPC EQ SPC NUM SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM SPC FRH SPC SPC SPC SPC SPC WT SPC IDEN SPC SPC SPC SPC SPC IDEN SPC EQ SPC IDEN OPERACIONES_ARITMETICAS NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-36)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ESTRUCTURA_FOR ::= FRD SPC IDEN SPC EQ SPC NUM SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM SPC FRH SPC SPC SPC SPC SPC WT SPC IDEN SPC SPC SPC SPC SPC IDEN SPC EQ SPC IDEN OPERACIONES_CICLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOR",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-35)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACIONES_DO ::= IDEN EQ NUM OPERACIONES_ARITMETICAS NUM OPERACIONES_DO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACIONES_DO ::= IDEN EQ IDEN OPERACIONES_ARITMETICAS IDEN OPERACIONES_DO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACIONES_DO ::= IDEN EQ IDEN OPERACIONES_ARITMETICAS NUM OPERACIONES_DO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACIONES_DO ::= IDEN EQ NUM OPERACIONES_ARITMETICAS IDEN OPERACIONES_DO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACIONES_DO ::= IDEN EQ NUM OPERACIONES_ARITMETICAS NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACIONES_DO ::= IDEN EQ IDEN OPERACIONES_ARITMETICAS IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACIONES_DO ::= IDEN EQ IDEN OPERACIONES_ARITMETICAS NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACIONES_DO ::= IDEN EQ NUM OPERACIONES_ARITMETICAS IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES_DO",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ESTRUCTURA_DO ::= FRH SPC SPC SPC SPC SPC OPERACIONES_DO SPC SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ESTRUCTURA_DO ::= FRH SPC SPC SPC SPC SPC OPERACIONES_DO SPC SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ESTRUCTURA_DO ::= SPC SPC FRH SPC SPC SPC SPC SPC OPERACIONES_DO SPC SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC IDEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ESTRUCTURA_DO ::= SPC SPC FRH SPC SPC SPC SPC SPC OPERACIONES_DO SPC SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ESTRUCTURA_INSTANCIAR ::= NMCL SPC IDEN SPC EQ SPC CLIN SPC NMCL PIZ PDR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_INSTANCIAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ESTRUCTURA_INSTANCIAR ::= IDEN SPC EQ SPC CLIN SPC NMCL PIZ PDR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_INSTANCIAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Declar ::= INT SPC Asign 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declar",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Declar ::= FLOAT SPC Asign 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declar",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Declar ::= INT SPC IDEN SPC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declar",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // STRUC_if ::= ifU STRUC_if 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STRUC_if",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // STRUC_if ::= ifELS STRUC_if 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STRUC_if",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // STRUC_if ::= ifU 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STRUC_if",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // STRUC_if ::= ifELS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STRUC_if",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ifU ::= IF SPC cond1 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifU",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ifU ::= IF SPC cond2 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifU",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ifU ::= IF SPC cond3 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifU",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ifU ::= IF SPC cond4 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifU",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ifU ::= IF SPC cond5 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifU",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ifELS ::= ELS SPC cond1 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifELS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ifELS ::= ELS SPC cond2 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifELS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ifELS ::= ELS SPC cond3 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifELS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ifELS ::= ELS SPC cond4 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifELS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ifELS ::= ELS SPC cond5 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifELS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ifELS ::= ELS SPC SPC SPC SPC RETN SPC NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifELS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cond1 ::= IDEN MOD NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond1",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cond2 ::= IDEN EQEQ NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond2",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cond3 ::= IDEN NEQ NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond3",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cond4 ::= IDEN MYQ NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond4",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cond5 ::= IDEN MNQ NUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond5",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
