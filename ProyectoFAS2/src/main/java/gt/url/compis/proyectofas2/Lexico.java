// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/url/compis/proyectofas2/flex/lexico.flex

package gt.url.compis.proyectofas2;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00"+
    "\1\u5000\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100"+
    "\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800"+
    "\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100\1\u5c00\45\u1f00"+
    "\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00\1\u6000\1\u6100"+
    "\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00\1\u6600\5\u1f00"+
    "\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00\2\u1f00\1\u6c00"+
    "\1\u1f00\1\u6d00\21\u1f00\246\u0100\1\u6e00\20\u0100\1\u6f00\1\u7000"+
    "\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100\1\u7300\u0b05\u1f00"+
    "\1\u7400\1\u7500\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\6\1\7\1\10\1\0\1\11\1\12\2\0\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\11\24\1\25\1\26\1\27\1\30\1\31\2\0\1\32"+
    "\2\33\1\34\1\35\1\36\5\33\1\37\1\33\1\40"+
    "\1\41\1\42\1\33\1\43\1\44\1\45\1\46\5\33"+
    "\1\5\1\0\1\5\1\47\1\50\1\0\1\51\1\52"+
    "\1\53\1\54\1\55\1\50\1\56\1\57\1\60\2\50"+
    "\1\61\1\62\1\63\1\64\1\65\1\50\1\66\1\67"+
    "\1\70\1\71\1\72\1\50\1\73\1\50\1\74\12\0"+
    "\1\75\32\0\2\5\4\11\4\5\1\11\2\5\1\0"+
    "\7\5\1\11\4\5\1\11\5\5\27\11\1\5\37\11"+
    "\1\5\u01ca\11\4\5\14\11\16\5\5\11\7\5\1\11"+
    "\1\5\1\11\21\5\160\0\5\11\1\5\2\11\2\5"+
    "\4\11\1\5\1\11\6\5\1\11\1\5\3\11\1\5"+
    "\1\11\1\5\24\11\1\5\123\11\1\5\213\11\1\5"+
    "\5\0\2\5\246\11\1\5\46\11\2\5\1\11\6\5"+
    "\51\11\6\5\1\11\1\5\55\0\1\5\1\0\1\5"+
    "\2\0\1\5\2\0\1\5\1\0\10\5\33\11\4\5"+
    "\4\11\15\5\6\0\5\5\1\11\4\5\13\0\1\5"+
    "\1\0\3\5\53\11\37\0\4\5\2\11\1\0\143\11"+
    "\1\5\1\11\10\0\1\5\6\0\2\11\2\0\1\5"+
    "\4\0\2\11\12\0\3\11\2\5\1\11\17\5\1\0"+
    "\1\11\1\0\36\11\33\0\2\5\131\11\13\0\1\11"+
    "\16\5\12\0\41\11\11\0\2\11\4\5\1\11\2\5"+
    "\1\0\30\11\4\0\1\11\11\0\1\11\3\0\1\11"+
    "\5\0\22\5\31\11\3\0\4\5\13\11\65\5\25\11"+
    "\1\5\10\11\25\5\61\0\66\11\3\0\1\11\22\0"+
    "\1\11\7\0\12\11\2\0\2\5\12\0\1\5\20\11"+
    "\3\0\1\5\10\11\2\5\2\11\2\5\26\11\1\5"+
    "\7\11\1\5\1\11\3\5\4\11\2\5\1\0\1\11"+
    "\7\0\2\5\2\0\2\5\3\0\1\11\10\5\1\0"+
    "\4\5\2\11\1\5\3\11\2\0\2\5\12\0\4\11"+
    "\7\5\2\11\1\5\1\0\2\5\3\0\1\5\6\11"+
    "\4\5\2\11\2\5\26\11\1\5\7\11\1\5\2\11"+
    "\1\5\2\11\1\5\2\11\2\5\1\0\1\5\5\0"+
    "\4\5\2\0\2\5\3\0\3\5\1\0\7\5\4\11"+
    "\1\5\1\11\7\5\14\0\3\11\1\0\13\5\3\0"+
    "\1\5\11\11\1\5\3\11\1\5\26\11\1\5\7\11"+
    "\1\5\2\11\1\5\5\11\2\5\1\0\1\11\10\0"+
    "\1\5\3\0\1\5\3\0\2\5\1\11\17\5\2\11"+
    "\2\0\2\5\12\0\1\5\1\11\7\5\1\11\6\0"+
    "\1\5\3\0\1\5\10\11\2\5\2\11\2\5\26\11"+
    "\1\5\7\11\1\5\2\11\1\5\5\11\2\5\1\0"+
    "\1\11\7\0\2\5\2\0\2\5\3\0\10\5\2\0"+
    "\4\5\2\11\1\5\3\11\2\0\2\5\12\0\1\5"+
    "\1\11\20\5\1\0\1\11\1\5\6\11\3\5\3\11"+
    "\1\5\4\11\3\5\2\11\1\5\1\11\1\5\2\11"+
    "\3\5\2\11\3\5\3\11\3\5\14\11\4\5\5\0"+
    "\3\5\3\0\1\5\4\0\2\5\1\11\6\5\1\0"+
    "\16\5\12\0\11\5\1\11\6\5\5\0\10\11\1\5"+
    "\3\11\1\5\27\11\1\5\20\11\3\5\1\11\7\0"+
    "\1\5\3\0\1\5\4\0\7\5\2\0\1\5\3\11"+
    "\5\5\2\11\2\0\2\5\12\0\20\5\1\11\3\0"+
    "\1\5\10\11\1\5\3\11\1\5\27\11\1\5\12\11"+
    "\1\5\5\11\2\5\1\0\1\11\7\0\1\5\3\0"+
    "\1\5\4\0\7\5\2\0\7\5\1\11\1\5\2\11"+
    "\2\0\2\5\12\0\1\5\2\11\15\5\4\0\1\5"+
    "\10\11\1\5\3\11\1\5\51\11\2\0\1\11\7\0"+
    "\1\5\3\0\1\5\4\0\1\11\5\5\3\11\1\0"+
    "\7\5\3\11\2\0\2\5\12\0\12\5\6\11\2\5"+
    "\2\0\1\5\22\11\3\5\30\11\1\5\11\11\1\5"+
    "\1\11\2\5\7\11\3\5\1\0\4\5\6\0\1\5"+
    "\1\0\1\5\10\0\6\5\12\0\2\5\2\0\15\5"+
    "\60\11\1\0\2\11\7\0\4\5\10\11\10\0\1\5"+
    "\12\0\47\5\2\11\1\5\1\11\1\5\5\11\1\5"+
    "\30\11\1\5\1\11\1\5\12\11\1\0\2\11\11\0"+
    "\1\11\2\5\5\11\1\5\1\11\1\5\6\0\2\5"+
    "\12\0\2\5\4\11\40\5\1\11\27\5\2\0\6\5"+
    "\12\0\13\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\2\0\10\11\1\5\44\11\4\5\24\0\1\5\2\0"+
    "\5\11\13\0\1\5\44\0\11\5\1\0\71\5\53\11"+
    "\24\0\1\11\12\0\6\5\6\11\4\0\4\11\3\0"+
    "\1\11\3\0\2\11\7\0\3\11\4\0\15\11\14\0"+
    "\1\11\17\0\2\5\46\11\1\5\1\11\5\5\1\11"+
    "\2\5\53\11\1\5\115\11\1\5\4\11\2\5\7\11"+
    "\1\5\1\11\1\5\4\11\2\5\51\11\1\5\4\11"+
    "\2\5\41\11\1\5\4\11\2\5\7\11\1\5\1\11"+
    "\1\5\4\11\2\5\17\11\1\5\71\11\1\5\4\11"+
    "\2\5\103\11\2\5\3\0\40\5\20\11\20\5\126\11"+
    "\2\5\6\11\3\5\u016c\11\2\5\21\11\1\5\32\11"+
    "\5\5\113\11\3\5\13\11\7\5\15\11\1\5\4\11"+
    "\3\0\13\5\22\11\3\0\13\5\22\11\2\0\14\5"+
    "\15\11\1\5\3\11\1\5\2\0\14\5\64\11\40\0"+
    "\3\5\1\11\3\5\2\11\1\0\2\5\12\0\41\5"+
    "\4\0\1\5\12\0\6\5\131\11\7\5\5\11\2\0"+
    "\42\11\1\0\1\11\5\5\106\11\12\5\37\11\1\5"+
    "\14\0\4\5\14\0\12\5\12\0\36\11\2\5\5\11"+
    "\13\5\54\11\4\5\32\11\6\5\12\0\46\5\27\11"+
    "\5\0\4\5\65\11\12\0\1\5\35\0\2\5\13\0"+
    "\6\5\12\0\15\5\1\11\10\5\16\0\102\5\5\0"+
    "\57\11\21\0\7\11\4\5\12\0\21\5\11\0\14\5"+
    "\3\0\36\11\15\0\2\11\12\0\54\11\16\0\14\5"+
    "\44\11\24\0\10\5\12\0\3\5\3\11\12\0\44\11"+
    "\2\5\11\11\7\5\53\11\2\5\3\11\20\5\3\0"+
    "\1\5\25\0\4\11\1\0\6\11\1\0\2\11\3\0"+
    "\1\11\5\5\300\11\72\0\1\5\5\0\26\11\2\5"+
    "\6\11\2\5\46\11\2\5\6\11\2\5\10\11\1\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\37\11\2\5"+
    "\65\11\1\5\7\11\1\5\1\11\3\5\3\11\1\5"+
    "\7\11\3\5\4\11\2\5\6\11\4\5\15\11\5\5"+
    "\3\11\1\5\7\11\16\5\5\0\30\5\2\3\5\0"+
    "\20\5\2\11\23\5\1\11\13\5\5\0\1\5\12\0"+
    "\1\5\1\11\15\5\1\11\20\5\15\11\3\5\40\11"+
    "\20\5\15\0\4\5\1\0\3\5\14\0\21\5\1\11"+
    "\4\5\1\11\2\5\12\11\1\5\1\11\3\5\5\11"+
    "\6\5\1\11\1\5\1\11\1\5\1\11\1\5\4\11"+
    "\1\5\13\11\2\5\4\11\5\5\5\11\4\5\1\11"+
    "\21\5\51\11\u0177\5\57\11\1\5\57\11\1\5\205\11"+
    "\6\5\4\11\3\0\2\11\14\5\46\11\1\5\1\11"+
    "\5\5\1\11\2\5\70\11\7\5\1\11\17\5\1\0"+
    "\27\11\11\5\7\11\1\5\7\11\1\5\7\11\1\5"+
    "\7\11\1\5\7\11\1\5\7\11\1\5\7\11\1\5"+
    "\7\11\1\5\40\0\57\5\1\11\325\5\3\11\31\5"+
    "\11\11\6\0\1\5\5\11\2\5\5\11\4\5\126\11"+
    "\2\5\2\0\2\5\3\11\1\5\132\11\1\5\4\11"+
    "\5\5\53\11\1\5\136\11\21\5\33\11\65\5\306\11"+
    "\112\5\360\11\20\5\215\11\103\5\56\11\2\5\15\11"+
    "\3\5\20\11\12\0\2\11\24\5\57\11\1\0\4\5"+
    "\12\0\1\5\37\11\2\0\120\11\2\0\45\5\11\11"+
    "\2\5\147\11\2\5\65\11\2\5\5\11\60\5\13\11"+
    "\1\0\3\11\1\0\4\11\1\0\27\11\5\0\20\5"+
    "\1\11\7\5\64\11\14\5\2\0\62\11\22\0\12\5"+
    "\12\0\6\5\22\0\6\11\3\5\1\11\1\5\2\11"+
    "\13\0\34\11\10\0\2\5\27\11\15\0\14\5\35\11"+
    "\3\5\4\0\57\11\16\0\16\5\1\11\12\0\6\5"+
    "\5\11\1\0\12\11\12\0\5\11\1\5\51\11\16\0"+
    "\11\5\3\11\1\0\10\11\2\0\2\5\12\0\6\5"+
    "\27\11\3\5\1\11\3\0\62\11\1\0\1\11\3\0"+
    "\2\11\2\0\5\11\2\0\1\11\1\0\1\11\30\5"+
    "\3\11\2\5\13\11\5\0\2\5\3\11\2\0\12\5"+
    "\6\11\2\5\6\11\2\5\6\11\11\5\7\11\1\5"+
    "\7\11\1\5\53\11\1\5\14\11\10\5\163\11\10\0"+
    "\1\5\2\0\2\5\12\0\6\5\244\11\14\5\27\11"+
    "\4\5\61\11\4\5\u0100\3\156\11\2\5\152\11\46\5"+
    "\7\11\14\5\5\11\5\5\1\11\1\0\12\11\1\5"+
    "\15\11\1\5\5\11\1\5\1\11\1\5\2\11\1\5"+
    "\2\11\1\5\154\11\41\5\153\11\22\5\100\11\2\5"+
    "\66\11\50\5\15\11\3\5\20\0\20\5\20\0\3\5"+
    "\2\11\30\5\3\11\31\5\1\11\6\5\5\11\1\5"+
    "\207\11\2\5\1\0\4\5\1\11\13\5\12\0\7\5"+
    "\32\11\4\5\1\11\1\5\32\11\13\5\131\11\3\5"+
    "\6\11\2\5\6\11\2\5\6\11\2\5\3\11\3\5"+
    "\2\11\3\5\2\11\22\5\3\0\4\5\14\11\1\5"+
    "\32\11\1\5\23\11\1\5\2\11\1\5\17\11\2\5"+
    "\16\11\42\5\173\11\105\5\65\11\210\5\1\0\202\5"+
    "\35\11\3\5\61\11\17\5\1\0\37\5\40\11\15\5"+
    "\36\11\5\5\46\11\5\0\5\5\36\11\2\5\44\11"+
    "\4\5\10\11\1\5\5\11\52\5\236\11\2\5\12\0"+
    "\6\5\44\11\4\5\44\11\4\5\50\11\10\5\64\11"+
    "\234\5\67\11\11\5\26\11\12\5\10\11\230\5\6\11"+
    "\2\5\1\11\1\5\54\11\1\5\2\11\3\5\1\11"+
    "\2\5\27\11\12\5\27\11\11\5\37\11\101\5\23\11"+
    "\1\5\2\11\12\5\26\11\12\5\32\11\106\5\70\11"+
    "\6\5\2\11\100\5\1\11\3\0\1\5\2\0\5\5"+
    "\4\0\4\11\1\5\3\11\1\5\35\11\2\5\3\0"+
    "\4\5\1\0\40\5\35\11\3\5\35\11\43\5\10\11"+
    "\1\5\34\11\2\0\31\5\66\11\12\5\26\11\12\5"+
    "\23\11\15\5\22\11\156\5\111\11\67\5\63\11\15\5"+
    "\63\11\15\5\44\11\4\0\10\5\12\0\306\5\35\11"+
    "\12\5\1\11\10\5\26\11\13\0\217\5\27\11\11\5"+
    "\3\0\65\11\17\0\37\5\12\0\17\5\4\0\55\11"+
    "\13\0\2\5\1\0\17\5\1\0\2\5\31\11\7\5"+
    "\12\0\6\5\3\0\44\11\16\0\1\5\12\0\4\5"+
    "\1\11\2\0\11\5\43\11\1\0\2\5\1\11\11\5"+
    "\3\0\60\11\16\0\4\11\4\5\4\0\3\5\12\0"+
    "\1\11\1\5\1\11\43\5\22\11\1\5\31\11\14\0"+
    "\6\5\1\0\101\5\7\11\1\5\1\11\1\5\4\11"+
    "\1\5\17\11\1\5\12\11\7\5\57\11\14\0\5\5"+
    "\12\0\6\5\4\0\1\5\10\11\2\5\2\11\2\5"+
    "\26\11\1\5\7\11\1\5\2\11\1\5\5\11\1\5"+
    "\2\0\1\11\7\0\2\5\2\0\2\5\3\0\2\5"+
    "\1\11\6\5\1\0\5\5\5\11\2\0\2\5\7\0"+
    "\3\5\5\0\213\5\65\11\22\0\4\11\5\5\12\0"+
    "\4\5\1\0\1\11\40\5\60\11\24\0\2\11\1\5"+
    "\1\11\10\5\12\0\246\5\57\11\7\0\2\5\11\0"+
    "\27\5\4\11\2\0\42\5\60\11\21\0\3\5\1\11"+
    "\13\5\12\0\46\5\53\11\15\0\1\11\7\5\12\0"+
    "\66\5\33\11\2\5\17\0\4\5\12\0\306\5\54\11"+
    "\17\0\145\5\100\11\12\0\25\5\1\11\240\5\10\11"+
    "\2\5\47\11\7\0\2\5\7\0\1\11\1\5\1\11"+
    "\1\0\33\5\1\11\12\0\50\11\7\0\1\11\4\0"+
    "\10\5\1\0\10\5\1\11\13\0\56\11\20\0\3\5"+
    "\1\11\42\5\71\11\7\5\11\11\1\5\45\11\10\0"+
    "\1\5\10\0\1\11\17\5\12\0\30\5\36\11\2\5"+
    "\26\0\1\5\16\0\111\5\7\11\1\5\2\11\1\5"+
    "\46\11\6\0\3\5\1\0\1\5\2\0\1\5\7\0"+
    "\1\11\1\0\10\5\12\0\6\5\6\11\1\5\2\11"+
    "\1\5\40\11\5\0\1\5\2\0\1\5\5\0\1\11"+
    "\7\5\12\0\u0136\5\23\11\4\0\346\5\4\11\37\5"+
    "\232\11\146\5\157\11\21\5\304\11\274\5\57\11\1\5"+
    "\11\0\307\5\107\11\271\5\71\11\7\5\37\11\1\5"+
    "\12\0\146\5\36\11\2\5\5\0\13\5\60\11\7\0"+
    "\11\5\4\11\14\5\12\0\11\5\25\11\5\5\23\11"+
    "\260\5\100\11\200\5\113\11\4\5\1\0\1\11\67\0"+
    "\7\5\4\0\15\11\100\5\2\11\1\5\1\11\34\5"+
    "\370\11\10\5\363\11\15\5\37\11\61\5\3\11\21\5"+
    "\4\11\10\5\u018c\11\4\5\153\11\5\5\15\11\3\5"+
    "\11\11\7\5\12\11\3\5\2\0\1\5\4\0\301\5"+
    "\5\0\3\5\26\0\2\5\7\0\36\5\4\0\224\5"+
    "\3\0\273\5\125\11\1\5\107\11\1\5\2\11\2\5"+
    "\1\11\2\5\2\11\2\5\4\11\1\5\14\11\1\5"+
    "\1\11\1\5\7\11\1\5\101\11\1\5\4\11\2\5"+
    "\10\11\1\5\7\11\1\5\34\11\1\5\4\11\1\5"+
    "\5\11\1\5\1\11\3\5\7\11\1\5\u0154\11\2\5"+
    "\31\11\1\5\31\11\1\5\37\11\1\5\31\11\1\5"+
    "\37\11\1\5\31\11\1\5\37\11\1\5\31\11\1\5"+
    "\37\11\1\5\31\11\1\5\10\11\2\5\151\0\4\5"+
    "\62\0\10\5\1\0\16\5\1\0\26\5\5\0\1\5"+
    "\17\0\120\5\7\0\1\5\21\0\2\5\7\0\1\5"+
    "\2\0\1\5\5\0\325\5\55\11\3\5\7\0\7\11"+
    "\2\5\12\0\4\5\1\11\u0171\5\54\11\16\0\5\5"+
    "\306\11\13\5\7\0\51\5\104\11\7\0\1\11\4\5"+
    "\12\0\u0156\5\1\11\117\5\4\11\1\5\33\11\1\5"+
    "\2\11\1\5\1\11\2\5\1\11\1\5\12\11\1\5"+
    "\4\11\1\5\1\11\1\5\1\11\6\5\1\11\4\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\3\11\1\5"+
    "\2\11\1\5\1\11\2\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\2\11\1\5"+
    "\1\11\2\5\4\11\1\5\7\11\1\5\4\11\1\5"+
    "\4\11\1\5\1\11\1\5\12\11\1\5\21\11\5\5"+
    "\3\11\1\5\5\11\1\5\21\11\104\5\327\11\51\5"+
    "\65\11\13\5\336\11\2\5\u0182\11\16\5\u0131\11\37\5"+
    "\36\11\343\5\1\0\36\5\140\0\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30208];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\20\1\21\1\22\1\23\7\4\1\24\13\4"+
    "\1\25\1\0\1\26\1\0\1\27\1\30\2\0\1\3"+
    "\1\0\1\31\4\32\1\33\2\32\17\4\1\34\2\0"+
    "\1\35\3\32\23\4\1\0\1\3\1\32\1\36\20\4"+
    "\1\37\3\4\1\40\1\41\1\32\2\4\1\42\1\4"+
    "\1\43\6\4\1\44\6\4\1\0\1\32\1\4\1\45"+
    "\3\4\1\46\11\4\5\0\1\32\1\47\3\4\1\0"+
    "\3\4\1\50\5\4\6\0\1\32\1\0\2\4\1\51"+
    "\1\0\1\52\1\53\1\54\2\4\1\0\1\55\1\4"+
    "\6\0\1\56\1\0\2\4\1\0\2\4\1\0\1\4"+
    "\3\0\1\57\1\60\2\0\1\4\1\61\1\0\1\4"+
    "\1\62\2\0\1\4\5\0\1\63\1\0\1\64\3\0"+
    "\1\4\1\0\1\65\23\0\1\66\10\0\1\67\13\0"+
    "\1\70\1\0\1\71\3\0\1\72\10\0\1\73\11\0"+
    "\1\74\1\75\1\0\1\76\2\0\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\76\0\76\0\174\0\272\0\370\0\u0136"+
    "\0\76\0\76\0\76\0\76\0\u0174\0\76\0\u01b2\0\76"+
    "\0\u01f0\0\u022e\0\u026c\0\76\0\76\0\76\0\u02aa\0\76"+
    "\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\76"+
    "\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c"+
    "\0\u068a\0\u06c8\0\u0706\0\76\0\370\0\370\0\u0744\0\76"+
    "\0\76\0\u022e\0\u0782\0\u07c0\0\u07fe\0\76\0\u0326\0\u083c"+
    "\0\u087a\0\u08b8\0\u0326\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee"+
    "\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde"+
    "\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u07fe"+
    "\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80"+
    "\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170"+
    "\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u0d52"+
    "\0\u1360\0\u0326\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4"+
    "\0\u1702\0\u1740\0\u0136\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u0136"+
    "\0\u1876\0\u18b4\0\u18f2\0\u0136\0\u1930\0\u0136\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u0136\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u0136\0\u1d10"+
    "\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00"+
    "\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0"+
    "\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0"+
    "\0\u231e\0\u235c\0\u0136\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492"+
    "\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682"+
    "\0\u26c0\0\u26fe\0\u0136\0\u273c\0\u0136\0\u0136\0\u0136\0\u277a"+
    "\0\u27b8\0\u27f6\0\u0136\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c"+
    "\0\u296a\0\u29a8\0\u0326\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade"+
    "\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\76\0\76"+
    "\0\u2c90\0\u2cce\0\u2d0c\0\u0136\0\u2d4a\0\u2d88\0\u0136\0\u2dc6"+
    "\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u0136"+
    "\0\u2fb6\0\u0136\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\76"+
    "\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc"+
    "\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc"+
    "\0\u350a\0\u3548\0\u3586\0\76\0\u35c4\0\u3602\0\u3640\0\u367e"+
    "\0\u36bc\0\u36fa\0\u3738\0\u3776\0\76\0\u37b4\0\u37f2\0\u3830"+
    "\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u3a20"+
    "\0\76\0\u3a5e\0\76\0\u3a9c\0\u3ada\0\u3b18\0\76\0\u3b56"+
    "\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\76"+
    "\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8"+
    "\0\u3f36\0\76\0\76\0\u3f74\0\76\0\u3fb2\0\u3ff0\0\76"+
    "\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\2\1\3\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\3\32\1\33\1\32\1\34\1\35"+
    "\1\36\2\32\1\37\1\32\1\40\2\10\1\41\1\42"+
    "\1\43\1\44\1\10\1\45\1\46\1\47\1\50\2\10"+
    "\1\51\1\52\1\53\5\10\101\0\1\4\123\0\1\54"+
    "\45\0\2\55\4\0\2\55\1\56\7\55\1\0\26\55"+
    "\1\0\26\55\11\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\25\10\17\0\1\60\77\0\1\61"+
    "\2\0\1\62\1\23\66\0\1\63\4\0\1\64\74\0"+
    "\1\65\1\0\2\62\72\0\1\65\1\0\2\23\101\0"+
    "\1\66\56\0\1\10\6\0\1\57\2\0\2\67\5\0"+
    "\6\67\1\70\6\67\1\0\25\67\12\0\1\10\6\0"+
    "\1\57\2\0\2\67\5\0\15\67\1\0\25\67\12\0"+
    "\1\10\6\0\1\57\2\0\2\67\5\0\1\71\14\67"+
    "\1\0\25\67\12\0\1\10\6\0\1\57\2\0\2\67"+
    "\5\0\7\67\1\72\5\67\1\0\25\67\12\0\1\10"+
    "\6\0\1\57\2\0\2\67\5\0\11\67\1\73\3\67"+
    "\1\0\25\67\12\0\1\10\6\0\1\57\2\0\2\67"+
    "\5\0\15\67\1\0\16\67\1\74\6\67\12\0\1\10"+
    "\6\0\1\57\2\0\2\67\5\0\11\67\1\75\3\67"+
    "\1\0\25\67\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\14\10\1\76\10\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\1\10"+
    "\1\77\7\10\1\100\2\10\1\101\10\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\5\10"+
    "\1\102\17\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\13\10\1\103\3\10\1\104\3\10"+
    "\1\105\1\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\1\10\1\106\23\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\13\10"+
    "\1\107\11\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\5\10\1\110\17\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\5\10"+
    "\1\111\2\10\1\112\14\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\16\10\1\113\6\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\5\10\1\114\17\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\10\10\1\115\14\10"+
    "\25\0\1\10\51\0\15\116\1\117\60\116\2\64\1\4"+
    "\1\64\1\5\71\64\23\0\2\120\62\0\1\10\6\0"+
    "\1\57\2\0\2\67\5\0\2\67\1\73\12\67\1\0"+
    "\25\67\12\0\1\10\6\0\1\57\2\0\2\67\5\0"+
    "\5\67\1\121\7\67\1\0\25\67\12\0\1\10\6\0"+
    "\1\57\2\0\2\67\5\0\13\67\1\73\1\67\1\0"+
    "\25\67\12\0\1\10\6\0\1\57\2\0\2\67\5\0"+
    "\15\67\1\0\10\67\1\122\14\67\12\0\1\10\6\0"+
    "\1\57\2\0\2\67\5\0\14\67\1\123\1\0\25\67"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\11\10\1\124\13\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\4\10\1\125\20\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\1\10\1\126\23\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\13\10\1\127\11\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\3\10\1\130\13\10\1\131\2\10\1\132\2\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\20\10\1\133\4\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\3\10\1\134\21\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\20\10\1\135\4\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\3\10\1\136\21\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\3\10\1\137\13\10\1\140\5\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\5\10"+
    "\1\141\17\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\20\10\1\142\4\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\5\10"+
    "\1\143\17\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\14\10\1\144\10\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\1\10"+
    "\1\145\23\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\13\10\1\146\11\10\1\0\15\116"+
    "\1\147\75\116\1\147\4\116\1\150\53\116\11\0\1\10"+
    "\6\0\1\57\2\0\2\67\5\0\12\67\1\123\2\67"+
    "\1\0\25\67\12\0\1\10\6\0\1\57\2\0\2\67"+
    "\5\0\15\67\1\0\13\67\1\151\11\67\12\0\1\10"+
    "\6\0\1\57\2\0\2\67\5\0\3\67\1\152\11\67"+
    "\1\0\25\67\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\5\10\1\153\17\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\5\10"+
    "\1\154\17\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\17\10\1\155\5\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\17\10"+
    "\1\156\5\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\16\10\1\157\6\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\4\10"+
    "\1\160\13\10\1\161\4\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\14\10\1\162\10\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\5\10\1\163\6\10\1\164\10\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\16\10"+
    "\1\165\6\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\10\10\1\166\14\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\5\10"+
    "\1\167\17\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\11\10\1\170\4\10\1\171\6\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\20\10\1\172\4\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\16\10\1\173\6\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\14\10\1\174\10\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\13\10\1\175\11\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\15\10\1\176\7\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\11\10\1\177\13\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\14\10\1\200\10\10\1\0\15\116\1\147\4\116"+
    "\1\4\53\116\11\0\1\10\6\0\1\57\2\0\2\67"+
    "\5\0\15\67\1\0\3\67\1\201\21\67\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\1\10"+
    "\1\202\23\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\13\10\1\203\11\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\5\10"+
    "\1\204\17\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\20\10\1\161\4\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\5\10"+
    "\1\205\17\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\5\10\1\206\17\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\16\10"+
    "\1\207\6\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\11\10\1\210\13\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\16\10"+
    "\1\211\6\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\13\10\1\212\11\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\10\10"+
    "\1\213\14\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\5\10\1\214\17\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\16\10"+
    "\1\215\6\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\21\10\1\216\3\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\5\10"+
    "\1\217\17\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\1\10\1\220\23\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\4\10"+
    "\1\221\20\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\20\10\1\222\4\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\10\10"+
    "\1\223\14\10\2\0\1\224\4\0\1\224\2\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\25\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\67\5\0\15\67"+
    "\1\0\10\67\1\225\14\67\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\13\10\1\226\11\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\1\10\1\227\23\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\12\10\1\230\12\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\21\10\1\231\3\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\22\10\1\232\2\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\14\10\1\233\10\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\3\10\1\234\21\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\2\10\1\235\22\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\13\10\1\236\11\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\10\10\1\237\14\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\12\10\1\240\12\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\13\10\1\241\11\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\14\10\1\242\10\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\16\10\1\243\6\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\5\10\1\244\17\10"+
    "\54\0\1\245\5\0\1\246\4\0\1\247\1\250\1\251"+
    "\16\0\1\10\6\0\1\57\2\0\2\67\5\0\15\67"+
    "\1\0\15\67\1\252\7\67\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\14\10\1\253\10\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\5\10\1\254\17\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\3\10\1\255\21\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\5\10\1\256\17\10\2\0\1\257\4\0\1\257"+
    "\2\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\25\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\5\10\1\260\17\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\10\10"+
    "\1\261\14\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\4\10\1\262\20\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\16\10"+
    "\1\263\6\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\5\10\1\264\17\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\3\10"+
    "\1\265\21\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\17\10\1\266\5\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\1\10"+
    "\1\267\23\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\4\10\1\270\20\10\52\0\1\271"+
    "\12\0\1\272\75\0\1\273\62\0\1\274\101\0\1\275"+
    "\71\0\1\276\35\0\1\10\6\0\1\57\2\0\2\67"+
    "\5\0\15\67\1\0\1\67\1\277\23\67\2\0\1\300"+
    "\4\0\1\300\2\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\25\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\13\10\1\301\11\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\20\10\1\302\4\10\12\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\16\10\1\303\6\10"+
    "\54\0\1\304\33\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\17\10\1\305\5\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\16\10"+
    "\1\306\6\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\5\10\1\307\17\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\13\10"+
    "\1\310\11\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\10\10\1\311\14\10\7\0\1\312"+
    "\2\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\25\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\17\10\1\313\5\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\1\10"+
    "\1\314\23\10\55\0\1\315\110\0\1\316\64\0\1\317"+
    "\77\0\1\320\100\0\1\321\75\0\1\322\23\0\1\10"+
    "\6\0\1\57\2\0\2\67\5\0\15\67\1\0\11\67"+
    "\1\323\13\67\54\0\1\324\33\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\20\10\1\325\4\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\14\10\1\326\10\10\52\0\1\327\35\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\20\10"+
    "\1\330\4\10\12\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\1\10\1\331\23\10\66\0\1\332"+
    "\21\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\4\10\1\333\20\10\56\0\1\334\75\0\1\335"+
    "\71\0\1\336\120\0\1\337\65\0\1\340\67\0\1\341"+
    "\70\0\1\342\35\0\1\10\6\0\1\57\2\0\2\10"+
    "\5\0\15\10\1\0\1\10\1\343\23\10\12\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\16\10"+
    "\1\344\6\10\55\0\1\345\32\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\1\10\1\346\23\10"+
    "\12\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\16\10\1\347\6\10\67\0\1\350\2\0\1\351"+
    "\15\0\1\10\6\0\1\57\2\0\2\10\5\0\15\10"+
    "\1\0\5\10\1\352\17\10\64\0\1\353\75\0\1\354"+
    "\100\0\1\355\64\0\1\356\74\0\1\357\32\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\16\10"+
    "\1\360\6\10\56\0\1\361\31\0\1\10\6\0\1\57"+
    "\2\0\2\10\5\0\15\10\1\0\16\10\1\362\6\10"+
    "\61\0\1\363\3\0\1\364\63\0\1\365\34\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\17\10"+
    "\1\366\5\10\52\0\1\367\110\0\1\370\71\0\1\371"+
    "\100\0\1\372\67\0\1\373\103\0\1\374\104\0\1\375"+
    "\73\0\1\376\66\0\1\377\22\0\1\u0100\2\0\1\10"+
    "\6\0\1\57\2\0\2\10\5\0\15\10\1\0\25\10"+
    "\33\0\1\u0101\133\0\1\u0102\75\0\1\u0103\70\0\1\u0104"+
    "\63\0\1\u0105\75\0\1\u0106\101\0\1\u0107\100\0\1\u0108"+
    "\102\0\1\u0109\76\0\1\u010a\71\0\1\u010b\70\0\1\u010c"+
    "\71\0\1\u010d\56\0\1\u010e\117\0\1\u010f\77\0\1\u0110"+
    "\72\0\1\u0111\110\0\1\u0112\2\0\1\u0113\61\0\1\u0114"+
    "\104\0\1\u0115\43\0\1\u0116\120\0\1\u0117\104\0\1\u0118"+
    "\71\0\1\u0119\101\0\1\u011a\71\0\1\u011b\3\0\1\u011c"+
    "\63\0\1\u011d\74\0\1\u011e\76\0\1\u011f\106\0\1\u0120"+
    "\101\0\1\u0121\62\0\1\u0122\110\0\1\u0123\100\0\1\u0124"+
    "\73\0\1\u0125\66\0\1\u0126\75\0\1\u0127\100\0\1\u0128"+
    "\101\0\1\u0129\71\0\1\u012a\62\0\1\u012b\101\0\1\u012c"+
    "\100\0\1\u012d\76\0\1\u012e\71\0\1\u012f\107\0\1\u0130"+
    "\62\0\1\u0131\77\0\1\u0132\72\0\1\u0133\77\0\1\u0134"+
    "\106\0\1\u0135\60\0\1\u0136\104\0\1\u0137\66\0\1\u0138"+
    "\75\0\1\u0139\110\0\1\u013a\100\0\1\u013b\62\0\1\u013c"+
    "\110\0\1\u013d\71\0\1\u013e\63\0\1\u013f\110\0\1\u0140"+
    "\100\0\1\u0141\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16430];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\4\1\4\11\1\1\1\11\1\1\1\11"+
    "\3\1\3\11\1\1\1\11\7\1\1\11\13\1\1\11"+
    "\1\0\1\1\1\0\2\11\2\0\1\1\1\0\1\11"+
    "\27\1\2\0\27\1\1\0\54\1\1\0\20\1\5\0"+
    "\5\1\1\0\11\1\6\0\1\1\1\0\3\1\1\0"+
    "\5\1\1\0\2\1\6\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\3\0\2\11\2\0\2\1\1\0"+
    "\2\1\2\0\1\1\5\0\1\1\1\0\1\1\3\0"+
    "\1\1\1\0\1\11\23\0\1\11\10\0\1\11\13\0"+
    "\1\11\1\0\1\11\3\0\1\11\10\0\1\11\11\0"+
    "\2\11\1\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error Lexico " + (yyline+1) + " " + (yycolumn+1) + " " + yytext() );
            }
            // fall through
          case 65: break;
          case 2:
            { return new Symbol(sym.SPC, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 66: break;
          case 3:
            { 
            }
            // fall through
          case 67: break;
          case 4:
            { return new Symbol(sym.IDEN, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 68: break;
          case 5:
            { return new Symbol(sym.MOD, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 69: break;
          case 6:
            { return new Symbol(sym.PIZ, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 70: break;
          case 7:
            { return new Symbol(sym.PDR, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 71: break;
          case 8:
            { return new Symbol(sym.MUL, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 72: break;
          case 9:
            { return new Symbol(sym.SUM, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 73: break;
          case 10:
            { return new Symbol(sym.COMA, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 74: break;
          case 11:
            { return new Symbol(sym.RES, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 75: break;
          case 12:
            { return new Symbol(sym.P, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 76: break;
          case 13:
            { return new Symbol(sym.DIV, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 77: break;
          case 14:
            { return new Symbol( sym.NUM, yyline +1, yycolumn +1, yytext() );
            }
            // fall through
          case 78: break;
          case 15:
            { return new Symbol(sym.DSP, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 79: break;
          case 16:
            { return new Symbol(sym.FLC, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 80: break;
          case 17:
            { return new Symbol(sym.MNQ, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 81: break;
          case 18:
            { return new Symbol(sym.EQ, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 82: break;
          case 19:
            { return new Symbol(sym.MYQ, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 83: break;
          case 20:
            { return new Symbol(sym.POT, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 84: break;
          case 21:
            { return new Symbol(sym.NEQ, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 85: break;
          case 22:
            { return new Symbol(sym.CADTXT, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 86: break;
          case 23:
            { return new Symbol(sym.INCR, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 87: break;
          case 24:
            { return new Symbol(sym.DECR, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 88: break;
          case 25:
            { return new Symbol(sym.EQEQ, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 89: break;
          case 26:
            { return new Symbol(sym.NMCL, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 90: break;
          case 27:
            { return new Symbol(sym.OLOG, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 91: break;
          case 28:
            { return new Symbol(sym.IF, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 92: break;
          case 29:
            { return new Symbol(sym.NUMR, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 93: break;
          case 30:
            { return new Symbol(sym.NBOOL, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 94: break;
          case 31:
            { return new Symbol(sym.RD, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 95: break;
          case 32:
            { return new Symbol(sym.FLOAT, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 96: break;
          case 33:
            { return new Symbol(sym.ELS, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 97: break;
          case 34:
            { return new Symbol(sym.CL, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 98: break;
          case 35:
            { return new Symbol(sym.FRD, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 99: break;
          case 36:
            { return new Symbol(sym.FRH, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 100: break;
          case 37:
            { return new Symbol(sym.STRING, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 101: break;
          case 38:
            { return new Symbol(sym.INT, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 102: break;
          case 39:
            { return new Symbol(sym.BOOL, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 103: break;
          case 40:
            { return new Symbol(sym.IMP, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 104: break;
          case 41:
            { return new Symbol(sym.RETN, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 105: break;
          case 42:
            { return new Symbol(sym.THN, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 106: break;
          case 43:
            { return new Symbol(sym.WT, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 107: break;
          case 44:
            { return new Symbol(sym.CLEX, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 108: break;
          case 45:
            { return new Symbol(sym.FRM, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 109: break;
          case 46:
            { return new Symbol(sym.METPRIN, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 110: break;
          case 47:
            { return new Symbol(sym.SQRT, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 111: break;
          case 48:
            { return new Symbol(sym.SEN, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 112: break;
          case 49:
            { return new Symbol(sym.MetRes, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 113: break;
          case 50:
            { return new Symbol(sym.CLIN, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 114: break;
          case 51:
            { return new Symbol(sym.FRDEC, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 115: break;
          case 52:
            { return new Symbol(sym.FRINC, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 116: break;
          case 53:
            { return new Symbol(sym.COS, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 117: break;
          case 54:
            { return new Symbol(sym.TAN, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 118: break;
          case 55:
            { return new Symbol(sym.LOG, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 119: break;
          case 56:
            { return new Symbol(sym.CLMTPV, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 120: break;
          case 57:
            { return new Symbol(sym.CLMTPU, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 121: break;
          case 58:
            { return new Symbol(sym.FcF, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 122: break;
          case 59:
            { return new Symbol(sym.CLMTPT, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 123: break;
          case 60:
            { return new Symbol(sym.FcI, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 124: break;
          case 61:
            { return new Symbol(sym.CLPRPV, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 125: break;
          case 62:
            { return new Symbol(sym.CLPRPU, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 126: break;
          case 63:
            { return new Symbol(sym.FcB, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 127: break;
          case 64:
            { return new Symbol(sym.CLPRPT, yyline +1, yycolumn +1, yytext());
            }
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
