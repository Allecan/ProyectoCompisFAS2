// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/url/compis/proyectofas1/flex/lexico.flex

package gt.url.compis.proyectofas1;
import static gt.url.compis.proyectofas1.Tokens.*;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\3\u1f00"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u1f00\1\u4a00\1\u1f00\1\u4b00\1\u4c00\2\u1f00\3\u0100"+
    "\1\u4d00\1\u4e00\1\u4f00\12\u1f00\4\u0100\1\u5000\17\u1f00\2\u0100"+
    "\1\u5100\41\u1f00\2\u0100\1\u5200\1\u5300\3\u1f00\1\u5400\27\u0100"+
    "\1\u5500\2\u0100\1\u5600\45\u1f00\1\u0100\1\u5700\1\u5800\11\u1f00"+
    "\1\u5900\24\u1f00\1\u5a00\1\u5b00\1\u1f00\1\u5c00\1\u5d00\1\u5e00"+
    "\1\u5f00\2\u1f00\1\u6000\5\u1f00\1\u6100\7\u1f00\1\u6200\1\u6300"+
    "\4\u1f00\1\u6400\21\u1f00\246\u0100\1\u6500\20\u0100\1\u6600\1\u6700"+
    "\25\u0100\1\u6800\34\u0100\1\u6900\14\u1f00\2\u0100\1\u6a00\u0b05\u1f00"+
    "\1\u6b00\1\u6c00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\1\2\1\3\1\4\23\0\1\5\1\6"+
    "\1\5\1\7\5\5\1\10\2\5\1\11\1\5\1\12"+
    "\1\13\11\14\1\5\1\15\5\5\32\16\1\0\1\5"+
    "\2\0\1\16\1\5\32\16\4\5\6\0\1\3\34\0"+
    "\4\16\4\0\1\16\12\0\1\16\4\0\1\16\5\0"+
    "\27\16\1\0\37\16\1\0\u01ca\16\4\0\14\16\16\0"+
    "\5\16\7\0\1\16\1\0\1\16\201\0\5\16\1\0"+
    "\2\16\2\0\4\16\1\0\1\16\6\0\1\16\1\0"+
    "\3\16\1\0\1\16\1\0\24\16\1\0\123\16\1\0"+
    "\213\16\10\0\246\16\1\0\46\16\2\0\1\16\7\0"+
    "\47\16\7\0\1\16\100\0\33\16\5\0\3\16\30\0"+
    "\1\16\24\0\53\16\43\0\2\16\1\0\143\16\1\0"+
    "\1\16\17\0\2\16\7\0\2\16\12\0\3\16\2\0"+
    "\1\16\20\0\1\16\1\0\36\16\35\0\131\16\13\0"+
    "\1\16\30\0\41\16\11\0\2\16\4\0\1\16\5\0"+
    "\26\16\4\0\1\16\11\0\1\16\3\0\1\16\27\0"+
    "\31\16\7\0\13\16\65\0\25\16\1\0\10\16\106\0"+
    "\66\16\3\0\1\16\22\0\1\16\7\0\12\16\17\0"+
    "\20\16\4\0\10\16\2\0\2\16\2\0\26\16\1\0"+
    "\7\16\1\0\1\16\3\0\4\16\3\0\1\16\20\0"+
    "\1\16\15\0\2\16\1\0\3\16\16\0\4\16\7\0"+
    "\2\16\10\0\6\16\4\0\2\16\2\0\26\16\1\0"+
    "\7\16\1\0\2\16\1\0\2\16\1\0\2\16\37\0"+
    "\4\16\1\0\1\16\23\0\3\16\20\0\11\16\1\0"+
    "\3\16\1\0\26\16\1\0\7\16\1\0\2\16\1\0"+
    "\5\16\3\0\1\16\22\0\1\16\17\0\2\16\17\0"+
    "\1\16\7\0\1\16\13\0\10\16\2\0\2\16\2\0"+
    "\26\16\1\0\7\16\1\0\2\16\1\0\5\16\3\0"+
    "\1\16\36\0\2\16\1\0\3\16\17\0\1\16\21\0"+
    "\1\16\1\0\6\16\3\0\3\16\1\0\4\16\3\0"+
    "\2\16\1\0\1\16\1\0\2\16\3\0\2\16\3\0"+
    "\3\16\3\0\14\16\26\0\1\16\50\0\1\16\13\0"+
    "\10\16\1\0\3\16\1\0\27\16\1\0\20\16\3\0"+
    "\1\16\32\0\3\16\5\0\2\16\36\0\1\16\4\0"+
    "\10\16\1\0\3\16\1\0\27\16\1\0\12\16\1\0"+
    "\5\16\3\0\1\16\40\0\1\16\1\0\2\16\17\0"+
    "\2\16\22\0\10\16\1\0\3\16\1\0\51\16\2\0"+
    "\1\16\20\0\1\16\5\0\3\16\10\0\3\16\30\0"+
    "\6\16\5\0\22\16\3\0\30\16\1\0\11\16\1\0"+
    "\1\16\2\0\7\16\72\0\60\16\1\0\2\16\13\0"+
    "\10\16\72\0\2\16\1\0\1\16\2\0\2\16\1\0"+
    "\1\16\2\0\1\16\6\0\4\16\1\0\7\16\1\0"+
    "\3\16\1\0\1\16\1\0\1\16\2\0\2\16\1\0"+
    "\4\16\1\0\2\16\11\0\1\16\2\0\5\16\1\0"+
    "\1\16\25\0\4\16\40\0\1\16\77\0\10\16\1\0"+
    "\44\16\33\0\5\16\163\0\53\16\24\0\1\16\20\0"+
    "\6\16\4\0\4\16\3\0\1\16\3\0\2\16\7\0"+
    "\3\16\4\0\15\16\14\0\1\16\21\0\46\16\1\0"+
    "\1\16\5\0\1\16\2\0\53\16\1\0\115\16\1\0"+
    "\4\16\2\0\7\16\1\0\1\16\1\0\4\16\2\0"+
    "\51\16\1\0\4\16\2\0\41\16\1\0\4\16\2\0"+
    "\7\16\1\0\1\16\1\0\4\16\2\0\17\16\1\0"+
    "\71\16\1\0\4\16\2\0\103\16\45\0\20\16\20\0"+
    "\126\16\2\0\6\16\3\0\u016c\16\2\0\21\16\1\0"+
    "\32\16\5\0\113\16\3\0\13\16\7\0\15\16\1\0"+
    "\4\16\16\0\22\16\16\0\22\16\16\0\15\16\1\0"+
    "\3\16\17\0\64\16\43\0\1\16\3\0\2\16\103\0"+
    "\130\16\10\0\5\16\2\0\42\16\1\0\1\16\5\0"+
    "\106\16\12\0\37\16\61\0\36\16\2\0\5\16\13\0"+
    "\54\16\4\0\32\16\66\0\27\16\11\0\65\16\122\0"+
    "\1\16\135\0\57\16\21\0\7\16\67\0\36\16\15\0"+
    "\2\16\12\0\54\16\32\0\44\16\51\0\3\16\12\0"+
    "\44\16\2\0\11\16\140\0\4\16\1\0\4\16\3\0"+
    "\2\16\11\0\300\16\100\0\26\16\2\0\6\16\2\0"+
    "\46\16\2\0\6\16\2\0\10\16\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\1\0\37\16\2\0\65\16\1\0"+
    "\7\16\1\0\1\16\3\0\3\16\1\0\7\16\3\0"+
    "\4\16\2\0\6\16\4\0\15\16\5\0\3\16\1\0"+
    "\7\16\53\0\2\2\25\0\2\16\23\0\1\16\34\0"+
    "\1\16\15\0\1\16\20\0\15\16\3\0\40\16\102\0"+
    "\1\16\4\0\1\16\2\0\12\16\1\0\1\16\3\0"+
    "\5\16\6\0\1\16\1\0\1\16\1\0\1\16\1\0"+
    "\4\16\1\0\13\16\2\0\4\16\5\0\5\16\4\0"+
    "\1\16\21\0\51\16\u0177\0\57\16\1\0\57\16\1\0"+
    "\205\16\6\0\4\16\3\0\2\16\14\0\46\16\1\0"+
    "\1\16\5\0\1\16\2\0\70\16\7\0\1\16\20\0"+
    "\27\16\11\0\7\16\1\0\7\16\1\0\7\16\1\0"+
    "\7\16\1\0\7\16\1\0\7\16\1\0\7\16\1\0"+
    "\7\16\120\0\1\16\325\0\3\16\31\0\11\16\7\0"+
    "\5\16\2\0\5\16\4\0\126\16\6\0\3\16\1\0"+
    "\132\16\1\0\4\16\5\0\52\16\2\0\136\16\21\0"+
    "\33\16\65\0\306\16\112\0\353\16\25\0\215\16\103\0"+
    "\56\16\2\0\15\16\3\0\20\16\12\0\2\16\24\0"+
    "\57\16\20\0\37\16\2\0\120\16\47\0\11\16\2\0"+
    "\147\16\2\0\44\16\1\0\10\16\77\0\13\16\1\0"+
    "\3\16\1\0\4\16\1\0\27\16\25\0\1\16\7\0"+
    "\64\16\16\0\62\16\76\0\6\16\3\0\1\16\1\0"+
    "\1\16\14\0\34\16\12\0\27\16\31\0\35\16\7\0"+
    "\57\16\34\0\1\16\20\0\5\16\1\0\12\16\12\0"+
    "\5\16\1\0\51\16\27\0\3\16\1\0\10\16\24\0"+
    "\27\16\3\0\1\16\3\0\62\16\1\0\1\16\3\0"+
    "\2\16\2\0\5\16\2\0\1\16\1\0\1\16\30\0"+
    "\3\16\2\0\13\16\7\0\3\16\14\0\6\16\2\0"+
    "\6\16\2\0\6\16\11\0\7\16\1\0\7\16\1\0"+
    "\53\16\1\0\12\16\12\0\163\16\35\0\244\16\14\0"+
    "\27\16\4\0\61\16\4\0\u0100\2\156\16\2\0\152\16"+
    "\46\0\7\16\14\0\5\16\5\0\1\16\1\0\12\16"+
    "\1\0\15\16\1\0\5\16\1\0\1\16\1\0\2\16"+
    "\1\0\2\16\1\0\154\16\41\0\153\16\22\0\100\16"+
    "\2\0\66\16\50\0\15\16\66\0\2\16\30\0\3\16"+
    "\31\0\1\16\6\0\5\16\1\0\207\16\7\0\1\16"+
    "\34\0\32\16\4\0\1\16\1\0\32\16\13\0\131\16"+
    "\3\0\6\16\2\0\6\16\2\0\6\16\2\0\3\16"+
    "\3\0\2\16\3\0\2\16\31\0\14\16\1\0\32\16"+
    "\1\0\23\16\1\0\2\16\1\0\17\16\2\0\16\16"+
    "\42\0\173\16\105\0\65\16\u010b\0\35\16\3\0\61\16"+
    "\57\0\40\16\15\0\36\16\5\0\46\16\12\0\36\16"+
    "\2\0\44\16\4\0\10\16\1\0\5\16\52\0\236\16"+
    "\22\0\44\16\4\0\44\16\4\0\50\16\10\0\64\16"+
    "\234\0\67\16\11\0\26\16\12\0\10\16\230\0\6\16"+
    "\2\0\1\16\1\0\54\16\1\0\2\16\3\0\1\16"+
    "\2\0\27\16\12\0\27\16\11\0\37\16\101\0\23\16"+
    "\1\0\2\16\12\0\26\16\12\0\32\16\106\0\70\16"+
    "\6\0\2\16\100\0\1\16\17\0\4\16\1\0\3\16"+
    "\1\0\33\16\54\0\35\16\3\0\35\16\43\0\10\16"+
    "\1\0\34\16\33\0\66\16\12\0\26\16\12\0\23\16"+
    "\15\0\22\16\156\0\111\16\67\0\63\16\15\0\63\16"+
    "\20\0\65\16\113\0\55\16\40\0\31\16\32\0\44\16"+
    "\51\0\43\16\3\0\1\16\14\0\60\16\16\0\4\16"+
    "\25\0\1\16\1\0\1\16\43\0\22\16\1\0\31\16"+
    "\124\0\7\16\1\0\1\16\1\0\4\16\1\0\17\16"+
    "\1\0\12\16\7\0\57\16\46\0\10\16\2\0\2\16"+
    "\2\0\26\16\1\0\7\16\1\0\2\16\1\0\5\16"+
    "\3\0\1\16\22\0\1\16\14\0\5\16\236\0\65\16"+
    "\22\0\4\16\65\0\60\16\24\0\2\16\1\0\1\16"+
    "\270\0\57\16\51\0\4\16\44\0\60\16\24\0\1\16"+
    "\73\0\53\16\125\0\32\16\u0186\0\100\16\37\0\2\16"+
    "\12\0\50\16\7\0\1\16\25\0\1\16\13\0\50\16"+
    "\2\0\4\16\66\0\71\16\7\0\11\16\1\0\45\16"+
    "\21\0\1\16\61\0\36\16\160\0\7\16\1\0\2\16"+
    "\1\0\46\16\25\0\1\16\271\0\232\16\146\0\157\16"+
    "\21\0\304\16\274\0\57\16\321\0\107\16\271\0\71\16"+
    "\7\0\37\16\161\0\36\16\22\0\60\16\20\0\4\16"+
    "\37\0\25\16\5\0\23\16\160\0\105\16\13\0\1\16"+
    "\102\0\15\16\100\0\2\16\36\0\355\16\23\0\363\16"+
    "\15\0\37\16\121\0\u018c\16\4\0\153\16\5\0\15\16"+
    "\3\0\11\16\7\0\12\16\u0266\0\125\16\1\0\107\16"+
    "\1\0\2\16\2\0\1\16\2\0\2\16\2\0\4\16"+
    "\1\0\14\16\1\0\1\16\1\0\7\16\1\0\101\16"+
    "\1\0\4\16\2\0\10\16\1\0\7\16\1\0\34\16"+
    "\1\0\4\16\1\0\5\16\1\0\1\16\3\0\7\16"+
    "\1\0\u0154\16\2\0\31\16\1\0\31\16\1\0\37\16"+
    "\1\0\31\16\1\0\37\16\1\0\31\16\1\0\37\16"+
    "\1\0\31\16\1\0\37\16\1\0\31\16\1\0\10\16"+
    "\u0234\0\305\16\73\0\104\16\274\0\4\16\1\0\33\16"+
    "\1\0\2\16\1\0\1\16\2\0\1\16\1\0\12\16"+
    "\1\0\4\16\1\0\1\16\1\0\1\16\6\0\1\16"+
    "\4\0\1\16\1\0\1\16\1\0\1\16\1\0\3\16"+
    "\1\0\2\16\1\0\1\16\2\0\1\16\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\1\0\2\16"+
    "\1\0\1\16\2\0\4\16\1\0\7\16\1\0\4\16"+
    "\1\0\4\16\1\0\1\16\1\0\12\16\1\0\21\16"+
    "\5\0\3\16\1\0\5\16\1\0\21\16\104\0\327\16"+
    "\51\0\65\16\13\0\336\16\2\0\u0182\16\16\0\u0131\16"+
    "\37\0\36\16\u02e2\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\2\1\2\3\1\4\1\2\1\0"+
    "\2\5\2\0\1\6\3\5\2\0\2\5\1\0\1\6"+
    "\1\0\1\5\2\0\1\5\1\0\3\5\3\0\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\17\0\36\0\55\0\74\0\113\0\132\0\151"+
    "\0\170\0\36\0\207\0\36\0\226\0\245\0\264\0\55"+
    "\0\55\0\303\0\322\0\341\0\360\0\377\0\u010e\0\u011d"+
    "\0\u012c\0\264\0\u013b\0\u014a\0\u0159\0\u0168\0\u0177\0\u0186"+
    "\0\u0195\0\17\0\u01a4\0\u01b3\0\u01c2\0\u01d1\0\u0168\0\36";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\0\1\3\1\4\1\5\1\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\24\0\2\14\1\15\1\14"+
    "\1\0\1\14\2\0\1\14\1\16\1\17\2\0\1\17"+
    "\1\0\1\20\1\21\1\22\1\20\1\17\1\20\2\17"+
    "\1\20\1\23\5\0\2\24\1\5\1\24\1\25\1\24"+
    "\2\13\1\24\1\13\14\0\1\11\7\0\2\14\1\15"+
    "\1\26\1\0\1\27\2\0\1\14\1\16\7\0\1\16"+
    "\6\0\1\16\7\0\1\16\3\0\2\11\1\0\1\16"+
    "\5\0\2\30\1\13\1\30\1\25\1\30\2\13\1\30"+
    "\1\13\5\0\2\14\1\15\1\14\1\31\1\14\2\16"+
    "\1\14\1\16\7\0\1\16\1\0\1\31\1\0\2\16"+
    "\1\0\1\16\1\17\2\0\1\17\1\0\1\17\1\32"+
    "\11\17\2\0\1\17\1\0\1\20\1\21\1\22\1\20"+
    "\1\33\1\20\2\23\1\20\1\23\1\17\2\0\1\17"+
    "\1\0\1\17\1\32\1\23\1\17\1\33\1\17\2\23"+
    "\1\17\1\23\5\0\2\24\1\34\1\24\1\0\1\24"+
    "\2\0\1\24\1\16\14\0\1\13\2\0\5\35\2\36"+
    "\1\37\1\40\1\35\1\36\2\35\1\36\1\41\1\27"+
    "\1\42\2\27\1\43\12\27\5\0\4\30\1\0\1\30"+
    "\2\0\1\30\15\0\1\16\2\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\32\5\17\1\23\2\17\5\0\2\24"+
    "\1\34\1\24\1\31\1\24\2\16\1\24\1\16\10\35"+
    "\1\44\13\35\2\36\1\37\1\45\1\35\1\36\2\35"+
    "\1\36\1\41\5\35\2\36\1\37\1\45\1\46\1\36"+
    "\2\41\1\36\1\41\5\35\2\36\1\37\1\45\1\35"+
    "\1\47\2\35\1\36\1\41\7\35\1\41\1\44\1\46"+
    "\1\35\2\41\1\35\1\41\1\0\1\42\15\0\10\35"+
    "\1\44\1\35\1\42\11\35\2\36\1\37\1\45\1\35"+
    "\1\50\2\35\1\36\1\41\10\35\1\44\3\35\1\41"+
    "\2\35";

  private static int [] zzUnpackTrans() {
    int [] result = new int[480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\0\2\1\2\0\4\1\2\0"+
    "\2\1\1\0\1\1\1\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\11\1\1\3\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
            // fall through
          case 7: break;
          case 2:
            { lexeme=yytext(); return Identificador;
            }
            // fall through
          case 8: break;
          case 3:
            { lexeme=yytext(); return Numero;
            }
            // fall through
          case 9: break;
          case 4:
            { lexeme=yytext(); return Final_Linea;
            }
            // fall through
          case 10: break;
          case 5:
            { /*Ignore*/
            }
            // fall through
          case 11: break;
          case 6:
            { lexeme=yytext(); return Palabra;
            }
            // fall through
          case 12: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
