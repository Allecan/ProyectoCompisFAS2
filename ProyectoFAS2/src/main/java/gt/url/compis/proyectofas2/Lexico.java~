// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/url/compis/proyectofas2/flex/lexico.flex

package gt.url.compis.proyectofas2;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\3\u1f00"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u1f00\1\u4a00\1\u1f00\1\u4b00\1\u4c00\2\u1f00\3\u0100"+
    "\1\u4d00\1\u4e00\1\u4f00\12\u1f00\4\u0100\1\u5000\17\u1f00\2\u0100"+
    "\1\u5100\41\u1f00\2\u0100\1\u5200\1\u5300\3\u1f00\1\u5400\27\u0100"+
    "\1\u5500\2\u0100\1\u5600\45\u1f00\1\u0100\1\u5700\1\u5800\11\u1f00"+
    "\1\u5900\24\u1f00\1\u5a00\1\u5b00\1\u1f00\1\u5c00\1\u5d00\1\u5e00"+
    "\1\u5f00\2\u1f00\1\u6000\5\u1f00\1\u6100\7\u1f00\1\u6200\1\u6300"+
    "\4\u1f00\1\u6400\21\u1f00\246\u0100\1\u6500\20\u0100\1\u6600\1\u6700"+
    "\25\u0100\1\u6800\34\u0100\1\u6900\14\u1f00\2\u0100\1\u6a00\u0b05\u1f00"+
    "\1\u6b00\1\u6c00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\0\1\6\3\0\1\7\1\10\1\0"+
    "\1\11\1\0\1\12\1\13\1\0\1\14\1\15\10\16"+
    "\1\0\1\17\1\20\1\21\1\22\2\0\1\23\2\6"+
    "\1\24\11\6\1\25\1\26\1\27\1\6\1\30\1\6"+
    "\1\31\6\6\3\0\1\32\1\6\1\0\1\33\1\34"+
    "\1\35\1\36\1\37\1\6\1\40\1\41\1\42\2\6"+
    "\1\43\1\44\1\45\1\46\1\47\1\6\1\50\1\51"+
    "\1\52\1\53\1\54\1\6\1\55\1\6\1\56\12\0"+
    "\1\57\34\0\4\6\4\0\1\6\12\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0"+
    "\14\6\16\0\5\6\7\0\1\6\1\0\1\6\201\0"+
    "\5\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0"+
    "\123\6\1\0\213\6\10\0\246\6\1\0\46\6\2\0"+
    "\1\6\7\0\47\6\7\0\1\6\100\0\33\6\5\0"+
    "\3\6\30\0\1\6\24\0\53\6\43\0\2\6\1\0"+
    "\143\6\1\0\1\6\17\0\2\6\7\0\2\6\12\0"+
    "\3\6\2\0\1\6\20\0\1\6\1\0\36\6\35\0"+
    "\131\6\13\0\1\6\30\0\41\6\11\0\2\6\4\0"+
    "\1\6\5\0\26\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\27\0\31\6\7\0\13\6\65\0\25\6\1\0"+
    "\10\6\106\0\66\6\3\0\1\6\22\0\1\6\7\0"+
    "\12\6\17\0\20\6\4\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\3\0"+
    "\1\6\20\0\1\6\15\0\2\6\1\0\3\6\16\0"+
    "\4\6\7\0\2\6\10\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\37\0\4\6\1\0\1\6\23\0\3\6\20\0"+
    "\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\3\0\1\6\22\0\1\6\17\0"+
    "\2\6\17\0\1\6\7\0\1\6\13\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\3\0\1\6\36\0\2\6\1\0\3\6\17\0"+
    "\1\6\21\0\1\6\1\0\6\6\3\0\3\6\1\0"+
    "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0"+
    "\2\6\3\0\3\6\3\0\14\6\26\0\1\6\50\0"+
    "\1\6\13\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\20\6\3\0\1\6\32\0\3\6\5\0\2\6\36\0"+
    "\1\6\4\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\3\0\1\6\40\0\1\6\1\0"+
    "\2\6\17\0\2\6\22\0\10\6\1\0\3\6\1\0"+
    "\51\6\2\0\1\6\20\0\1\6\5\0\3\6\10\0"+
    "\3\6\30\0\6\6\5\0\22\6\3\0\30\6\1\0"+
    "\11\6\1\0\1\6\2\0\7\6\72\0\60\6\1\0"+
    "\2\6\13\0\10\6\72\0\2\6\1\0\1\6\2\0"+
    "\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0"+
    "\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\4\6\1\0\2\6\11\0\1\6\2\0"+
    "\5\6\1\0\1\6\25\0\4\6\40\0\1\6\77\0"+
    "\10\6\1\0\44\6\33\0\5\6\163\0\53\6\24\0"+
    "\1\6\20\0\6\6\4\0\4\6\3\0\1\6\3\0"+
    "\2\6\7\0\3\6\4\0\15\6\14\0\1\6\21\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0"+
    "\115\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\45\0"+
    "\20\6\20\0\126\6\2\0\6\6\3\0\u016c\6\2\0"+
    "\21\6\1\0\32\6\5\0\113\6\3\0\13\6\7\0"+
    "\15\6\1\0\4\6\16\0\22\6\16\0\22\6\16\0"+
    "\15\6\1\0\3\6\17\0\64\6\43\0\1\6\3\0"+
    "\2\6\103\0\130\6\10\0\5\6\2\0\42\6\1\0"+
    "\1\6\5\0\106\6\12\0\37\6\61\0\36\6\2\0"+
    "\5\6\13\0\54\6\4\0\32\6\66\0\27\6\11\0"+
    "\65\6\122\0\1\6\135\0\57\6\21\0\7\6\67\0"+
    "\36\6\15\0\2\6\12\0\54\6\32\0\44\6\51\0"+
    "\3\6\12\0\44\6\2\0\11\6\140\0\4\6\1\0"+
    "\4\6\3\0\2\6\11\0\300\6\100\0\26\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0"+
    "\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0"+
    "\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0"+
    "\3\6\1\0\7\6\53\0\2\3\25\0\2\6\23\0"+
    "\1\6\34\0\1\6\15\0\1\6\20\0\15\6\3\0"+
    "\40\6\102\0\1\6\4\0\1\6\2\0\12\6\1\0"+
    "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0"+
    "\5\6\4\0\1\6\21\0\51\6\u0177\0\57\6\1\0"+
    "\57\6\1\0\205\6\6\0\4\6\3\0\2\6\14\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0"+
    "\1\6\20\0\27\6\11\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\120\0\1\6\325\0\3\6\31\0"+
    "\11\6\7\0\5\6\2\0\5\6\4\0\126\6\6\0"+
    "\3\6\1\0\132\6\1\0\4\6\5\0\52\6\2\0"+
    "\136\6\21\0\33\6\65\0\306\6\112\0\353\6\25\0"+
    "\215\6\103\0\56\6\2\0\15\6\3\0\20\6\12\0"+
    "\2\6\24\0\57\6\20\0\37\6\2\0\120\6\47\0"+
    "\11\6\2\0\147\6\2\0\44\6\1\0\10\6\77\0"+
    "\13\6\1\0\3\6\1\0\4\6\1\0\27\6\25\0"+
    "\1\6\7\0\64\6\16\0\62\6\76\0\6\6\3\0"+
    "\1\6\1\0\1\6\14\0\34\6\12\0\27\6\31\0"+
    "\35\6\7\0\57\6\34\0\1\6\20\0\5\6\1\0"+
    "\12\6\12\0\5\6\1\0\51\6\27\0\3\6\1\0"+
    "\10\6\24\0\27\6\3\0\1\6\3\0\62\6\1\0"+
    "\1\6\3\0\2\6\2\0\5\6\2\0\1\6\1\0"+
    "\1\6\30\0\3\6\2\0\13\6\7\0\3\6\14\0"+
    "\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0"+
    "\7\6\1\0\53\6\1\0\12\6\12\0\163\6\35\0"+
    "\244\6\14\0\27\6\4\0\61\6\4\0\u0100\3\156\6"+
    "\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6"+
    "\1\0\12\6\1\0\15\6\1\0\5\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\153\6"+
    "\22\0\100\6\2\0\66\6\50\0\15\6\66\0\2\6"+
    "\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6"+
    "\7\0\1\6\34\0\32\6\4\0\1\6\1\0\32\6"+
    "\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6"+
    "\2\0\3\6\3\0\2\6\3\0\2\6\31\0\14\6"+
    "\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6"+
    "\2\0\16\6\42\0\173\6\105\0\65\6\u010b\0\35\6"+
    "\3\0\61\6\57\0\40\6\15\0\36\6\5\0\46\6"+
    "\12\0\36\6\2\0\44\6\4\0\10\6\1\0\5\6"+
    "\52\0\236\6\22\0\44\6\4\0\44\6\4\0\50\6"+
    "\10\0\64\6\234\0\67\6\11\0\26\6\12\0\10\6"+
    "\230\0\6\6\2\0\1\6\1\0\54\6\1\0\2\6"+
    "\3\0\1\6\2\0\27\6\12\0\27\6\11\0\37\6"+
    "\101\0\23\6\1\0\2\6\12\0\26\6\12\0\32\6"+
    "\106\0\70\6\6\0\2\6\100\0\1\6\17\0\4\6"+
    "\1\0\3\6\1\0\33\6\54\0\35\6\3\0\35\6"+
    "\43\0\10\6\1\0\34\6\33\0\66\6\12\0\26\6"+
    "\12\0\23\6\15\0\22\6\156\0\111\6\67\0\63\6"+
    "\15\0\63\6\20\0\65\6\113\0\55\6\40\0\31\6"+
    "\32\0\44\6\51\0\43\6\3\0\1\6\14\0\60\6"+
    "\16\0\4\6\25\0\1\6\1\0\1\6\43\0\22\6"+
    "\1\0\31\6\124\0\7\6\1\0\1\6\1\0\4\6"+
    "\1\0\17\6\1\0\12\6\7\0\57\6\46\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\3\0\1\6\22\0\1\6\14\0\5\6"+
    "\236\0\65\6\22\0\4\6\65\0\60\6\24\0\2\6"+
    "\1\0\1\6\270\0\57\6\51\0\4\6\44\0\60\6"+
    "\24\0\1\6\73\0\53\6\125\0\32\6\u0186\0\100\6"+
    "\37\0\2\6\12\0\50\6\7\0\1\6\25\0\1\6"+
    "\13\0\50\6\2\0\4\6\66\0\71\6\7\0\11\6"+
    "\1\0\45\6\21\0\1\6\61\0\36\6\160\0\7\6"+
    "\1\0\2\6\1\0\46\6\25\0\1\6\271\0\232\6"+
    "\146\0\157\6\21\0\304\6\274\0\57\6\321\0\107\6"+
    "\271\0\71\6\7\0\37\6\161\0\36\6\22\0\60\6"+
    "\20\0\4\6\37\0\25\6\5\0\23\6\160\0\105\6"+
    "\13\0\1\6\102\0\15\6\100\0\2\6\36\0\355\6"+
    "\23\0\363\6\15\0\37\6\121\0\u018c\6\4\0\153\6"+
    "\5\0\15\6\3\0\11\6\7\0\12\6\u0266\0\125\6"+
    "\1\0\107\6\1\0\2\6\2\0\1\6\2\0\2\6"+
    "\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6"+
    "\1\0\101\6\1\0\4\6\2\0\10\6\1\0\7\6"+
    "\1\0\34\6\1\0\4\6\1\0\5\6\1\0\1\6"+
    "\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\10\6\u0234\0\305\6\73\0\104\6\274\0\4\6"+
    "\1\0\33\6\1\0\2\6\1\0\1\6\2\0\1\6"+
    "\1\0\12\6\1\0\4\6\1\0\1\6\1\0\1\6"+
    "\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6"+
    "\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6"+
    "\1\0\21\6\5\0\3\6\1\0\5\6\1\0\21\6"+
    "\104\0\327\6\51\0\65\6\13\0\336\6\2\0\u0182\6"+
    "\16\0\u0131\6\37\0\36\6\u02e2\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\2\1\1\7\2\10\1\11\1\12\1\13\1\14\1\15"+
    "\4\4\1\16\13\4\1\17\1\0\1\20\1\0\1\21"+
    "\1\22\2\0\1\23\2\4\1\24\20\4\1\25\1\26"+
    "\45\4\1\27\6\4\1\30\1\31\3\4\1\32\1\4"+
    "\1\33\5\4\1\34\11\4\1\0\2\4\1\35\3\4"+
    "\1\36\13\4\5\0\1\4\1\37\3\4\1\0\2\4"+
    "\1\40\2\4\1\41\7\4\6\0\1\4\1\0\2\4"+
    "\1\42\1\0\1\43\1\44\2\4\1\45\1\46\1\47"+
    "\2\4\1\50\1\51\6\0\1\52\1\0\2\4\1\0"+
    "\5\4\3\0\1\53\1\54\2\0\1\4\1\55\1\0"+
    "\1\4\1\56\1\4\1\57\1\60\5\0\1\61\1\0"+
    "\1\62\1\63\1\0\1\64\13\0\1\65\3\0\1\66"+
    "\5\0\1\67\7\0\1\70\1\0\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\60\0\220\0\300\0\360\0\60"+
    "\0\60\0\u0120\0\u0150\0\60\0\u0180\0\u01b0\0\u01b0\0\60"+
    "\0\60\0\u01e0\0\60\0\u0210\0\u0240\0\u0270\0\u02a0\0\60"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\60\0\300\0\300\0\u04e0\0\60"+
    "\0\60\0\u0180\0\u0510\0\60\0\u0540\0\u0570\0\360\0\u05a0"+
    "\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0"+
    "\0\u0510\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0"+
    "\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70"+
    "\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0"+
    "\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70"+
    "\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\360\0\u0fc0"+
    "\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\360\0\u1110"+
    "\0\u1140\0\u1170\0\360\0\u11a0\0\360\0\u11d0\0\u1200\0\u1230"+
    "\0\u1260\0\u1290\0\360\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380"+
    "\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\360"+
    "\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650"+
    "\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0"+
    "\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950"+
    "\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\360\0\u1a40\0\u1a70\0\360"+
    "\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0"+
    "\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\u1d70"+
    "\0\u1da0\0\360\0\u1dd0\0\360\0\360\0\u1e00\0\u1e30\0\360"+
    "\0\360\0\360\0\u1e60\0\u1e90\0\360\0\360\0\u1ec0\0\u1ef0"+
    "\0\u1f20\0\u1f50\0\u1f80\0\u1fb0\0\360\0\u1fe0\0\u2010\0\u2040"+
    "\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160\0\u2190\0\u21c0"+
    "\0\u21f0\0\60\0\60\0\u2220\0\u2250\0\u2280\0\360\0\u22b0"+
    "\0\u22e0\0\360\0\u2310\0\360\0\360\0\u2340\0\u2370\0\u23a0"+
    "\0\u23d0\0\u2400\0\360\0\u2430\0\360\0\360\0\u2460\0\60"+
    "\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580\0\u25b0\0\u25e0"+
    "\0\u2610\0\u2640\0\u2670\0\60\0\u26a0\0\u26d0\0\u2700\0\60"+
    "\0\u2730\0\u2760\0\u2790\0\u27c0\0\u27f0\0\60\0\u2820\0\u2850"+
    "\0\u2880\0\u28b0\0\u28e0\0\u2910\0\u2940\0\60\0\u2970\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\7\1\25\1\26\1\27"+
    "\2\7\1\30\1\7\1\31\1\32\1\33\1\34\1\7"+
    "\1\35\1\36\1\37\1\40\2\7\1\41\1\42\1\43"+
    "\5\7\62\0\1\3\77\0\1\44\36\0\2\45\2\0"+
    "\1\45\1\46\52\45\6\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\24\7\12\0\1\50\60\0"+
    "\1\51\1\0\1\52\2\17\54\0\1\53\3\52\54\0"+
    "\1\53\3\17\62\0\1\54\44\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\2\7\1\55\4\7\1\0\24\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\3\7"+
    "\1\56\3\7\1\0\24\7\7\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\5\7\1\57\1\7\1\0\24\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\15\7\1\60\6\7\7\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\13\7\1\61\10\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\1\62\7\7\1\63\2\7\1\64\10\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\4\7\1\65\17\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\12\7\1\66\7\7\1\67"+
    "\1\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\1\70\23\7\7\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\12\7\1\71\11\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\4\7\1\72\17\7\7\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\4\7\1\73\2\7"+
    "\1\74\14\7\7\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\15\7\1\75\2\7\1\76\3\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\4\7\1\77\17\7\7\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\7\7\1\100\14\7"+
    "\16\0\2\7\55\0\3\101\47\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\1\7\1\57\5\7\1\0\24\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\6\7"+
    "\1\57\1\0\24\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\7\7\1\102\14\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\10\7\1\103\13\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\3\7\1\104\20\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\1\105\23\7\7\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\12\7\1\106\11\7\7\0\1\7"+
    "\3\0\1\47\1\0\3\7\4\0\7\7\1\0\2\7"+
    "\1\107\13\7\1\110\2\7\1\111\2\7\7\0\1\7"+
    "\3\0\1\47\1\0\3\7\4\0\7\7\1\0\17\7"+
    "\1\112\4\7\7\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\17\7\1\113\4\7\7\0\1\7"+
    "\3\0\1\47\1\0\3\7\4\0\7\7\1\0\2\7"+
    "\1\114\21\7\7\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\2\7\1\115\13\7\1\116\5\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\4\7\1\117\17\7\7\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\17\7\1\120\4\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\4\7\1\121\17\7\7\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\7\7\1\122\3\7"+
    "\1\123\10\7\7\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\1\7\1\124\22\7\7\0\1\7"+
    "\3\0\1\47\1\0\3\7\4\0\7\7\1\0\1\125"+
    "\23\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\12\7\1\126\11\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\12\7\1\127"+
    "\11\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\4\7\1\130\17\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\4\7\1\131"+
    "\17\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\16\7\1\132\5\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\16\7\1\133"+
    "\5\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\15\7\1\134\6\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\3\7\1\135"+
    "\13\7\1\136\4\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\13\7\1\137\10\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\4\7\1\140\6\7\1\141\10\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\7\7\1\142"+
    "\14\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\4\7\1\143\17\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\10\7\1\144"+
    "\4\7\1\145\6\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\17\7\1\146\4\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\15\7\1\147\6\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\13\7\1\150\10\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\12\7\1\151\11\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\21\7\1\152\2\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\14\7\1\153\2\7\1\154\4\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\10\7\1\155"+
    "\13\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\10\7\1\156\13\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\13\7\1\157"+
    "\10\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\2\7\1\160\21\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\1\161\23\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\12\7\1\162\11\7\7\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\4\7\1\163\17\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\17\7\1\136\4\7\7\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\4\7\1\164\17\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\4\7\1\165\17\7\7\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\15\7\1\166\6\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\10\7\1\167\13\7\7\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\15\7\1\170\6\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\12\7\1\171\11\7\7\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\4\7\1\172\17\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\15\7\1\173\6\7\7\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\20\7\1\174\3\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\4\7\1\175\17\7\7\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\1\176\23\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\3\7\1\177\20\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\17\7\1\200\4\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\1\201\23\7\7\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\7\7\1\202\14\7\7\0\1\7"+
    "\3\0\1\47\1\0\3\7\4\0\7\7\1\0\4\7"+
    "\1\203\17\7\7\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\7\7\1\204\14\7\2\0\1\205"+
    "\4\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\24\7\7\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\7\7\1\206\14\7\7\0\1\7"+
    "\3\0\1\47\1\0\3\7\4\0\7\7\1\0\12\7"+
    "\1\207\11\7\7\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\1\210\23\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\11\7\1\211"+
    "\12\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\20\7\1\212\3\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\21\7\1\213"+
    "\2\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\13\7\1\214\10\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\2\7\1\215"+
    "\21\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\12\7\1\216\11\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\7\7\1\217"+
    "\14\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\11\7\1\220\12\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\12\7\1\221"+
    "\11\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\13\7\1\222\10\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\15\7\1\223"+
    "\6\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\3\7\1\224\20\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\4\7\1\225"+
    "\17\7\7\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\5\7\1\226\16\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\2\7\1\227"+
    "\21\7\2\0\1\205\33\0\1\230\5\0\1\231\4\0"+
    "\1\232\1\233\1\234\13\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\14\7\1\235\7\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\13\7\1\236\10\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\4\7\1\237\17\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\2\7\1\240\21\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\4\7\1\241\17\7\2\0"+
    "\1\242\4\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\24\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\4\7\1\243\17\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\3\7\1\244\20\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\15\7\1\245\6\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\4\7\1\246\17\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\2\7\1\247\21\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\16\7\1\250\5\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\1\251\23\7\7\0\1\7"+
    "\3\0\1\47\1\0\3\7\4\0\7\7\1\0\1\252"+
    "\12\7\1\253\10\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\3\7\1\254\20\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\7\7\1\255\14\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\1\256\12\7\1\257\10\7"+
    "\34\0\1\260\12\0\1\261\57\0\1\262\44\0\1\263"+
    "\63\0\1\264\53\0\1\265\32\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\1\266\23\7\2\0"+
    "\1\267\4\0\1\7\3\0\1\47\1\0\3\7\4\0"+
    "\7\7\1\0\24\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\12\7\1\270\11\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\17\7\1\271\4\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\15\7\1\272\6\7\2\0"+
    "\1\242\33\0\1\273\30\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\16\7\1\274\5\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\4\7\1\275\17\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\12\7\1\276\11\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\7\7\1\277\14\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\16\7\1\300\5\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\16\7\1\301\5\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\16\7\1\302\5\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\1\303\23\7\7\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\3\7\1\304\20\7\7\0\1\7"+
    "\3\0\1\47\1\0\3\7\4\0\7\7\1\0\16\7"+
    "\1\305\5\7\7\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\16\7\1\306\5\7\37\0\1\307"+
    "\72\0\1\310\46\0\1\311\61\0\1\312\62\0\1\313"+
    "\57\0\1\314\20\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\10\7\1\315\13\7\2\0\1\267"+
    "\33\0\1\316\30\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\17\7\1\317\4\7\7\0\1\7"+
    "\3\0\1\47\1\0\3\7\4\0\7\7\1\0\13\7"+
    "\1\320\10\7\34\0\1\321\32\0\1\7\3\0\1\47"+
    "\1\0\3\7\4\0\7\7\1\0\17\7\1\322\4\7"+
    "\7\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\1\323\23\7\7\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\3\7\1\324\20\7\7\0"+
    "\1\7\3\0\1\47\1\0\3\7\4\0\7\7\1\0"+
    "\1\325\12\7\1\326\10\7\40\0\1\327\57\0\1\330"+
    "\53\0\1\331\102\0\1\332\47\0\1\333\51\0\1\334"+
    "\52\0\1\335\32\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\1\336\23\7\7\0\1\7\3\0"+
    "\1\47\1\0\3\7\4\0\7\7\1\0\15\7\1\337"+
    "\6\7\37\0\1\340\27\0\1\7\3\0\1\47\1\0"+
    "\3\7\4\0\7\7\1\0\1\341\23\7\7\0\1\7"+
    "\3\0\1\47\1\0\3\7\4\0\7\7\1\0\15\7"+
    "\1\342\6\7\7\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\4\7\1\343\17\7\7\0\1\7"+
    "\3\0\1\47\1\0\3\7\4\0\7\7\1\0\16\7"+
    "\1\344\5\7\7\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\16\7\1\345\5\7\46\0\1\346"+
    "\57\0\1\347\62\0\1\350\46\0\1\351\56\0\1\352"+
    "\27\0\1\7\3\0\1\47\1\0\3\7\4\0\7\7"+
    "\1\0\15\7\1\353\6\7\40\0\1\354\26\0\1\7"+
    "\3\0\1\47\1\0\3\7\4\0\7\7\1\0\15\7"+
    "\1\355\6\7\7\0\1\7\3\0\1\47\1\0\3\7"+
    "\4\0\7\7\1\0\16\7\1\356\5\7\34\0\1\357"+
    "\72\0\1\360\53\0\1\361\62\0\1\362\51\0\1\363"+
    "\65\0\1\364\35\0\1\365\106\0\1\366\57\0\1\367"+
    "\52\0\1\370\45\0\1\371\74\0\1\372\53\0\1\373"+
    "\52\0\1\374\53\0\1\375\47\0\1\376\73\0\1\377"+
    "\66\0\1\u0100\34\0\1\u0101\73\0\1\u0102\53\0\1\u0103"+
    "\60\0\1\u0104\70\0\1\u0105\55\0\1\u0106\62\0\1\u0107"+
    "\63\0\1\u0108\50\0\1\u0109\53\0\1\u010a\57\0\1\u010b"+
    "\70\0\1\u010c\42\0\1\u010d\72\0\1\u010e\56\0\1\u010f"+
    "\60\0\1\u0110\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10656];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\2\11\2\1\1\11"+
    "\3\1\2\11\1\1\1\11\4\1\1\11\13\1\1\11"+
    "\1\0\1\1\1\0\2\11\2\0\1\11\130\1\1\0"+
    "\22\1\5\0\5\1\1\0\15\1\6\0\1\1\1\0"+
    "\3\1\1\0\13\1\6\0\1\1\1\0\2\1\1\0"+
    "\5\1\3\0\2\11\2\0\2\1\1\0\5\1\5\0"+
    "\1\1\1\0\2\1\1\0\1\11\13\0\1\11\3\0"+
    "\1\11\5\0\1\11\7\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(sym.error);
            }
            // fall through
          case 58: break;
          case 2:
            { lexeme=yytext(); return new Symbol(sym.SPC);
            }
            // fall through
          case 59: break;
          case 3:
            { lexeme=yytext(); return new Symbol(sym.F);
            }
            // fall through
          case 60: break;
          case 4:
            { lexeme=yytext(); return new Symbol(sym.IDEN);
            }
            // fall through
          case 61: break;
          case 5:
            { lexeme=yytext(); return new Symbol(sym.PIZ);
            }
            // fall through
          case 62: break;
          case 6:
            { lexeme=yytext(); return new Symbol(sym.PDR);
            }
            // fall through
          case 63: break;
          case 7:
            { lexeme=yytext(); return new Symbol(sym.P);
            }
            // fall through
          case 64: break;
          case 8:
            { lexeme=yytext(); return new Symbol(sym.NBOOL);
            }
            // fall through
          case 65: break;
          case 9:
            { lexeme=yytext(); return new Symbol(sym.NUM);
            }
            // fall through
          case 66: break;
          case 10:
            { lexeme=yytext(); return new Symbol(sym.FLC);
            }
            // fall through
          case 67: break;
          case 11:
            { lexeme=yytext(); return new Symbol(sym.MNQ);
            }
            // fall through
          case 68: break;
          case 12:
            { lexeme=yytext(); return new Symbol(sym.EQ);
            }
            // fall through
          case 69: break;
          case 13:
            { lexeme=yytext(); return new Symbol(sym.MYQ);
            }
            // fall through
          case 70: break;
          case 14:
            { lexeme=yytext(); return new Symbol(sym.POT);
            }
            // fall through
          case 71: break;
          case 15:
            { lexeme=yytext(); return new Symbol(sym.NEQ);
            }
            // fall through
          case 72: break;
          case 16:
            { lexeme=yytext(); return new Symbol(sym.CADTXT);
            }
            // fall through
          case 73: break;
          case 17:
            { lexeme=yytext(); return new Symbol(sym.INCR);
            }
            // fall through
          case 74: break;
          case 18:
            { lexeme=yytext(); return new Symbol(sym.DECR);
            }
            // fall through
          case 75: break;
          case 19:
            { lexeme=yytext(); return new Symbol(sym.EQEQ);
            }
            // fall through
          case 76: break;
          case 20:
            { lexeme=yytext(); return new Symbol(sym.OLOG);
            }
            // fall through
          case 77: break;
          case 21:
            { lexeme=yytext(); return new Symbol(sym.IF);
            }
            // fall through
          case 78: break;
          case 22:
            { lexeme=yytext(); return new Symbol(sym.NUMR);
            }
            // fall through
          case 79: break;
          case 23:
            { lexeme=yytext(); return new Symbol(sym.RD);
            }
            // fall through
          case 80: break;
          case 24:
            { lexeme=yytext(); return new Symbol(sym.FLOAT);
            }
            // fall through
          case 81: break;
          case 25:
            { lexeme=yytext(); return new Symbol(sym.ELS);
            }
            // fall through
          case 82: break;
          case 26:
            { lexeme=yytext(); return new Symbol(sym.CL);
            }
            // fall through
          case 83: break;
          case 27:
            { lexeme=yytext(); return new Symbol(sym.FRD);
            }
            // fall through
          case 84: break;
          case 28:
            { lexeme=yytext(); return new Symbol(sym.FRH);
            }
            // fall through
          case 85: break;
          case 29:
            { lexeme=yytext(); return new Symbol(sym.STRING);
            }
            // fall through
          case 86: break;
          case 30:
            { lexeme=yytext(); return new Symbol(sym.INT);
            }
            // fall through
          case 87: break;
          case 31:
            { lexeme=yytext(); return new Symbol(sym.BOOL);
            }
            // fall through
          case 88: break;
          case 32:
            { lexeme=yytext(); return new Symbol(sym.IMP);
            }
            // fall through
          case 89: break;
          case 33:
            { lexeme=yytext(); return new Symbol(sym.CLMT);
            }
            // fall through
          case 90: break;
          case 34:
            { lexeme=yytext(); return new Symbol(sym.RETN);
            }
            // fall through
          case 91: break;
          case 35:
            { lexeme=yytext(); return new Symbol(sym.THN);
            }
            // fall through
          case 92: break;
          case 36:
            { lexeme=yytext(); return new Symbol(sym.CLEX);
            }
            // fall through
          case 93: break;
          case 37:
            { lexeme=yytext(); return new Symbol(sym.FRM);
            }
            // fall through
          case 94: break;
          case 38:
            { lexeme=yytext(); return new Symbol(sym.CLPRPV);
            }
            // fall through
          case 95: break;
          case 39:
            { lexeme=yytext(); return new Symbol(sym.CLMTPV);
            }
            // fall through
          case 96: break;
          case 40:
            { lexeme=yytext(); return new Symbol(sym.CLPRPU);
            }
            // fall through
          case 97: break;
          case 41:
            { lexeme=yytext(); return new Symbol(sym.CLMTPU);
            }
            // fall through
          case 98: break;
          case 42:
            { lexeme=yytext(); return new Symbol(sym.METPRIN);
            }
            // fall through
          case 99: break;
          case 43:
            { lexeme=yytext(); return new Symbol(sym.SQRT);
            }
            // fall through
          case 100: break;
          case 44:
            { lexeme=yytext(); return new Symbol(sym.SEN);
            }
            // fall through
          case 101: break;
          case 45:
            { lexeme=yytext(); return new Symbol(sym.MetRes);
            }
            // fall through
          case 102: break;
          case 46:
            { lexeme=yytext(); return new Symbol(sym.CLIN);
            }
            // fall through
          case 103: break;
          case 47:
            { lexeme=yytext(); return new Symbol(sym.CLPRPT);
            }
            // fall through
          case 104: break;
          case 48:
            { lexeme=yytext(); return new Symbol(sym.CLMTPT);
            }
            // fall through
          case 105: break;
          case 49:
            { lexeme=yytext(); return new Symbol(sym.FRDEC);
            }
            // fall through
          case 106: break;
          case 50:
            { lexeme=yytext(); return new Symbol(sym.FRINC);
            }
            // fall through
          case 107: break;
          case 51:
            { lexeme=yytext(); return new Symbol(sym.CLPR);
            }
            // fall through
          case 108: break;
          case 52:
            { lexeme=yytext(); return new Symbol(sym.COS);
            }
            // fall through
          case 109: break;
          case 53:
            { lexeme=yytext(); return new Symbol(sym.TAN);
            }
            // fall through
          case 110: break;
          case 54:
            { lexeme=yytext(); return new Symbol(sym.LOG);
            }
            // fall through
          case 111: break;
          case 55:
            { lexeme=yytext(); return new Symbol(sym.FcF);
            }
            // fall through
          case 112: break;
          case 56:
            { lexeme=yytext(); return new Symbol(sym.FcI);
            }
            // fall through
          case 113: break;
          case 57:
            { lexeme=yytext(); return new Symbol(sym.FcB);
            }
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
