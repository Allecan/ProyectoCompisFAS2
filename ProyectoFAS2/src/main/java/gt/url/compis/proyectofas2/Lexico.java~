// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/url/compis/proyectofas2/flex/lexico.flex

package gt.url.compis.proyectofas2;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\3\u1f00"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u1f00\1\u4a00\1\u1f00\1\u4b00\1\u4c00\2\u1f00\3\u0100"+
    "\1\u4d00\1\u4e00\1\u4f00\12\u1f00\4\u0100\1\u5000\17\u1f00\2\u0100"+
    "\1\u5100\41\u1f00\2\u0100\1\u5200\1\u5300\3\u1f00\1\u5400\27\u0100"+
    "\1\u5500\2\u0100\1\u5600\45\u1f00\1\u0100\1\u5700\1\u5800\11\u1f00"+
    "\1\u5900\24\u1f00\1\u5a00\1\u5b00\1\u1f00\1\u5c00\1\u5d00\1\u5e00"+
    "\1\u5f00\2\u1f00\1\u6000\5\u1f00\1\u6100\7\u1f00\1\u6200\1\u6300"+
    "\4\u1f00\1\u6400\21\u1f00\246\u0100\1\u6500\20\u0100\1\u6600\1\u6700"+
    "\25\u0100\1\u6800\34\u0100\1\u6900\14\u1f00\2\u0100\1\u6a00\u0b05\u1f00"+
    "\1\u6b00\1\u6c00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\6\1\7\1\10\1\0\1\11\1\12\2\0\1\13"+
    "\1\14\1\15\1\16\1\0\1\17\1\20\1\21\1\22"+
    "\11\23\1\24\1\25\1\26\1\27\1\30\2\0\1\31"+
    "\2\32\1\33\1\34\1\35\5\32\1\36\1\32\1\37"+
    "\1\40\1\41\1\32\1\42\1\43\1\44\1\45\5\32"+
    "\1\5\1\0\1\5\1\46\1\47\1\0\1\50\1\51"+
    "\1\52\1\53\1\54\1\47\1\55\1\56\1\57\2\47"+
    "\1\60\1\61\1\62\1\63\1\64\1\47\1\65\1\66"+
    "\1\67\1\70\1\71\1\47\1\72\1\47\1\73\12\0"+
    "\1\74\32\0\2\5\4\11\4\5\1\11\2\5\1\0"+
    "\7\5\1\11\4\5\1\11\5\5\27\11\1\5\37\11"+
    "\1\5\u01ca\11\4\5\14\11\16\5\5\11\7\5\1\11"+
    "\1\5\1\11\21\5\160\0\5\11\1\5\2\11\2\5"+
    "\4\11\1\5\1\11\6\5\1\11\1\5\3\11\1\5"+
    "\1\11\1\5\24\11\1\5\123\11\1\5\213\11\1\5"+
    "\5\0\2\5\246\11\1\5\46\11\2\5\1\11\7\5"+
    "\47\11\7\5\1\11\1\5\55\0\1\5\1\0\1\5"+
    "\2\0\1\5\2\0\1\5\1\0\10\5\33\11\5\5"+
    "\3\11\15\5\6\0\5\5\1\11\4\5\13\0\1\5"+
    "\1\0\3\5\53\11\37\0\4\5\2\11\1\0\143\11"+
    "\1\5\1\11\10\0\1\5\6\0\2\11\2\0\1\5"+
    "\4\0\2\11\12\0\3\11\2\5\1\11\17\5\1\0"+
    "\1\11\1\0\36\11\33\0\2\5\131\11\13\0\1\11"+
    "\16\5\12\0\41\11\11\0\2\11\4\5\1\11\5\5"+
    "\26\11\4\0\1\11\11\0\1\11\3\0\1\11\5\0"+
    "\22\5\31\11\3\0\4\5\13\11\65\5\25\11\1\5"+
    "\10\11\26\5\60\0\66\11\3\0\1\11\22\0\1\11"+
    "\7\0\12\11\2\0\2\5\12\0\1\5\20\11\3\0"+
    "\1\5\10\11\2\5\2\11\2\5\26\11\1\5\7\11"+
    "\1\5\1\11\3\5\4\11\2\5\1\0\1\11\7\0"+
    "\2\5\2\0\2\5\3\0\1\11\10\5\1\0\4\5"+
    "\2\11\1\5\3\11\2\0\2\5\12\0\4\11\7\5"+
    "\2\11\4\5\3\0\1\5\6\11\4\5\2\11\2\5"+
    "\26\11\1\5\7\11\1\5\2\11\1\5\2\11\1\5"+
    "\2\11\2\5\1\0\1\5\5\0\4\5\2\0\2\5"+
    "\3\0\3\5\1\0\7\5\4\11\1\5\1\11\7\5"+
    "\14\0\3\11\1\0\13\5\3\0\1\5\11\11\1\5"+
    "\3\11\1\5\26\11\1\5\7\11\1\5\2\11\1\5"+
    "\5\11\2\5\1\0\1\11\10\0\1\5\3\0\1\5"+
    "\3\0\2\5\1\11\17\5\2\11\2\0\2\5\12\0"+
    "\1\5\1\11\7\5\1\11\6\0\1\5\3\0\1\5"+
    "\10\11\2\5\2\11\2\5\26\11\1\5\7\11\1\5"+
    "\2\11\1\5\5\11\2\5\1\0\1\11\7\0\2\5"+
    "\2\0\2\5\3\0\10\5\2\0\4\5\2\11\1\5"+
    "\3\11\2\0\2\5\12\0\1\5\1\11\20\5\1\0"+
    "\1\11\1\5\6\11\3\5\3\11\1\5\4\11\3\5"+
    "\2\11\1\5\1\11\1\5\2\11\3\5\2\11\3\5"+
    "\3\11\3\5\14\11\4\5\5\0\3\5\3\0\1\5"+
    "\4\0\2\5\1\11\6\5\1\0\16\5\12\0\11\5"+
    "\1\11\6\5\4\0\1\5\10\11\1\5\3\11\1\5"+
    "\27\11\1\5\20\11\3\5\1\11\7\0\1\5\3\0"+
    "\1\5\4\0\7\5\2\0\1\5\3\11\5\5\2\11"+
    "\2\0\2\5\12\0\20\5\1\11\3\0\1\5\10\11"+
    "\1\5\3\11\1\5\27\11\1\5\12\11\1\5\5\11"+
    "\2\5\1\0\1\11\7\0\1\5\3\0\1\5\4\0"+
    "\7\5\2\0\7\5\1\11\1\5\2\11\2\0\2\5"+
    "\12\0\1\5\2\11\15\5\4\0\1\5\10\11\1\5"+
    "\3\11\1\5\51\11\2\0\1\11\7\0\1\5\3\0"+
    "\1\5\4\0\1\11\5\5\3\11\1\0\7\5\3\11"+
    "\2\0\2\5\12\0\12\5\6\11\2\5\2\0\1\5"+
    "\22\11\3\5\30\11\1\5\11\11\1\5\1\11\2\5"+
    "\7\11\3\5\1\0\4\5\6\0\1\5\1\0\1\5"+
    "\10\0\6\5\12\0\2\5\2\0\15\5\60\11\1\0"+
    "\2\11\7\0\4\5\10\11\10\0\1\5\12\0\47\5"+
    "\2\11\1\5\1\11\2\5\2\11\1\5\1\11\2\5"+
    "\1\11\6\5\4\11\1\5\7\11\1\5\3\11\1\5"+
    "\1\11\1\5\1\11\2\5\2\11\1\5\4\11\1\0"+
    "\2\11\6\0\1\5\2\0\1\11\2\5\5\11\1\5"+
    "\1\11\1\5\6\0\2\5\12\0\2\5\4\11\40\5"+
    "\1\11\27\5\2\0\6\5\12\0\13\5\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\2\0\10\11\1\5\44\11"+
    "\4\5\24\0\1\5\2\0\5\11\13\0\1\5\44\0"+
    "\11\5\1\0\71\5\53\11\24\0\1\11\12\0\6\5"+
    "\6\11\4\0\4\11\3\0\1\11\3\0\2\11\7\0"+
    "\3\11\4\0\15\11\14\0\1\11\17\0\2\5\46\11"+
    "\1\5\1\11\5\5\1\11\2\5\53\11\1\5\115\11"+
    "\1\5\4\11\2\5\7\11\1\5\1\11\1\5\4\11"+
    "\2\5\51\11\1\5\4\11\2\5\41\11\1\5\4\11"+
    "\2\5\7\11\1\5\1\11\1\5\4\11\2\5\17\11"+
    "\1\5\71\11\1\5\4\11\2\5\103\11\2\5\3\0"+
    "\40\5\20\11\20\5\126\11\2\5\6\11\3\5\u016c\11"+
    "\2\5\21\11\1\5\32\11\5\5\113\11\3\5\13\11"+
    "\7\5\15\11\1\5\4\11\3\0\13\5\22\11\3\0"+
    "\13\5\22\11\2\0\14\5\15\11\1\5\3\11\1\5"+
    "\2\0\14\5\64\11\40\0\3\5\1\11\3\5\2\11"+
    "\1\0\2\5\12\0\41\5\4\0\1\5\12\0\6\5"+
    "\130\11\10\5\5\11\2\0\42\11\1\0\1\11\5\5"+
    "\106\11\12\5\37\11\1\5\14\0\4\5\14\0\12\5"+
    "\12\0\36\11\2\5\5\11\13\5\54\11\4\5\32\11"+
    "\6\5\12\0\46\5\27\11\5\0\4\5\65\11\12\0"+
    "\1\5\35\0\2\5\13\0\6\5\12\0\15\5\1\11"+
    "\10\5\16\0\102\5\5\0\57\11\21\0\7\11\4\5"+
    "\12\0\21\5\11\0\14\5\3\0\36\11\15\0\2\11"+
    "\12\0\54\11\16\0\14\5\44\11\24\0\10\5\12\0"+
    "\3\5\3\11\12\0\44\11\2\5\11\11\107\5\3\0"+
    "\1\5\25\0\4\11\1\0\4\11\3\0\2\11\3\0"+
    "\6\5\300\11\72\0\1\5\5\0\26\11\2\5\6\11"+
    "\2\5\46\11\2\5\6\11\2\5\10\11\1\5\1\11"+
    "\1\5\1\11\1\5\1\11\1\5\37\11\2\5\65\11"+
    "\1\5\7\11\1\5\1\11\3\5\3\11\1\5\7\11"+
    "\3\5\4\11\2\5\6\11\4\5\15\11\5\5\3\11"+
    "\1\5\7\11\16\5\5\0\30\5\2\3\5\0\20\5"+
    "\2\11\23\5\1\11\13\5\5\0\1\5\12\0\1\5"+
    "\1\11\15\5\1\11\20\5\15\11\3\5\40\11\20\5"+
    "\15\0\4\5\1\0\3\5\14\0\21\5\1\11\4\5"+
    "\1\11\2\5\12\11\1\5\1\11\3\5\5\11\6\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\4\11\1\5"+
    "\13\11\2\5\4\11\5\5\5\11\4\5\1\11\21\5"+
    "\51\11\u0177\5\57\11\1\5\57\11\1\5\205\11\6\5"+
    "\4\11\3\0\2\11\14\5\46\11\1\5\1\11\5\5"+
    "\1\11\2\5\70\11\7\5\1\11\17\5\1\0\27\11"+
    "\11\5\7\11\1\5\7\11\1\5\7\11\1\5\7\11"+
    "\1\5\7\11\1\5\7\11\1\5\7\11\1\5\7\11"+
    "\1\5\40\0\57\5\1\11\325\5\3\11\31\5\11\11"+
    "\6\0\1\5\5\11\2\5\5\11\4\5\126\11\2\5"+
    "\2\0\2\5\3\11\1\5\132\11\1\5\4\11\5\5"+
    "\52\11\2\5\136\11\21\5\33\11\65\5\306\11\112\5"+
    "\353\11\25\5\215\11\103\5\56\11\2\5\15\11\3\5"+
    "\20\11\12\0\2\11\24\5\57\11\1\0\4\5\12\0"+
    "\1\5\37\11\2\0\120\11\2\0\45\5\11\11\2\5"+
    "\147\11\2\5\44\11\1\5\10\11\77\5\13\11\1\0"+
    "\3\11\1\0\4\11\1\0\27\11\5\0\20\5\1\11"+
    "\7\5\64\11\14\5\2\0\62\11\22\0\12\5\12\0"+
    "\6\5\22\0\6\11\3\5\1\11\1\5\1\11\2\5"+
    "\12\0\34\11\10\0\2\5\27\11\15\0\14\5\35\11"+
    "\3\5\4\0\57\11\16\0\16\5\1\11\12\0\6\5"+
    "\5\11\1\0\12\11\12\0\5\11\1\5\51\11\16\0"+
    "\11\5\3\11\1\0\10\11\2\0\2\5\12\0\6\5"+
    "\27\11\3\5\1\11\3\0\62\11\1\0\1\11\3\0"+
    "\2\11\2\0\5\11\2\0\1\11\1\0\1\11\30\5"+
    "\3\11\2\5\13\11\5\0\2\5\3\11\2\0\12\5"+
    "\6\11\2\5\6\11\2\5\6\11\11\5\7\11\1\5"+
    "\7\11\1\5\53\11\1\5\12\11\12\5\163\11\10\0"+
    "\1\5\2\0\2\5\12\0\6\5\244\11\14\5\27\11"+
    "\4\5\61\11\4\5\u0100\3\156\11\2\5\152\11\46\5"+
    "\7\11\14\5\5\11\5\5\1\11\1\0\12\11\1\5"+
    "\15\11\1\5\5\11\1\5\1\11\1\5\2\11\1\5"+
    "\2\11\1\5\154\11\41\5\153\11\22\5\100\11\2\5"+
    "\66\11\50\5\15\11\3\5\20\0\20\5\20\0\3\5"+
    "\2\11\30\5\3\11\31\5\1\11\6\5\5\11\1\5"+
    "\207\11\2\5\1\0\4\5\1\11\13\5\12\0\7\5"+
    "\32\11\4\5\1\11\1\5\32\11\13\5\131\11\3\5"+
    "\6\11\2\5\6\11\2\5\6\11\2\5\3\11\3\5"+
    "\2\11\3\5\2\11\22\5\3\0\4\5\14\11\1\5"+
    "\32\11\1\5\23\11\1\5\2\11\1\5\17\11\2\5"+
    "\16\11\42\5\173\11\105\5\65\11\210\5\1\0\202\5"+
    "\35\11\3\5\61\11\17\5\1\0\37\5\40\11\15\5"+
    "\36\11\5\5\46\11\5\0\5\5\36\11\2\5\44\11"+
    "\4\5\10\11\1\5\5\11\52\5\236\11\2\5\12\0"+
    "\6\5\44\11\4\5\44\11\4\5\50\11\10\5\64\11"+
    "\234\5\67\11\11\5\26\11\12\5\10\11\230\5\6\11"+
    "\2\5\1\11\1\5\54\11\1\5\2\11\3\5\1\11"+
    "\2\5\27\11\12\5\27\11\11\5\37\11\101\5\23\11"+
    "\1\5\2\11\12\5\26\11\12\5\32\11\106\5\70\11"+
    "\6\5\2\11\100\5\1\11\3\0\1\5\2\0\5\5"+
    "\4\0\4\11\1\5\3\11\1\5\33\11\4\5\3\0"+
    "\4\5\1\0\40\5\35\11\3\5\35\11\43\5\10\11"+
    "\1\5\34\11\2\0\31\5\66\11\12\5\26\11\12\5"+
    "\23\11\15\5\22\11\156\5\111\11\67\5\63\11\15\5"+
    "\63\11\15\5\3\0\65\11\17\0\37\5\12\0\17\5"+
    "\4\0\55\11\13\0\2\5\1\0\22\5\31\11\7\5"+
    "\12\0\6\5\3\0\44\11\16\0\1\5\12\0\20\5"+
    "\43\11\1\0\2\5\1\11\11\5\3\0\60\11\16\0"+
    "\4\11\5\5\3\0\3\5\12\0\1\11\1\5\1\11"+
    "\43\5\22\11\1\5\31\11\14\0\6\5\1\0\101\5"+
    "\7\11\1\5\1\11\1\5\4\11\1\5\17\11\1\5"+
    "\12\11\7\5\57\11\14\0\5\5\12\0\6\5\4\0"+
    "\1\5\10\11\2\5\2\11\2\5\26\11\1\5\7\11"+
    "\1\5\2\11\1\5\5\11\2\5\1\0\1\11\7\0"+
    "\2\5\2\0\2\5\3\0\2\5\1\11\6\5\1\0"+
    "\5\5\5\11\2\0\2\5\7\0\3\5\5\0\213\5"+
    "\65\11\22\0\4\11\5\5\12\0\46\5\60\11\24\0"+
    "\2\11\1\5\1\11\10\5\12\0\246\5\57\11\7\0"+
    "\2\5\11\0\27\5\4\11\2\0\42\5\60\11\21\0"+
    "\3\5\1\11\13\5\12\0\46\5\53\11\15\0\10\5"+
    "\12\0\66\5\32\11\3\5\17\0\4\5\12\0\u0166\5"+
    "\100\11\12\0\25\5\2\11\12\0\50\11\7\0\1\11"+
    "\4\0\10\5\1\0\10\5\1\11\13\0\50\11\2\5"+
    "\4\11\20\0\46\5\71\11\7\5\11\11\1\5\45\11"+
    "\10\0\1\5\10\0\1\11\17\5\12\0\30\5\36\11"+
    "\2\5\26\0\1\5\16\0\111\5\7\11\1\5\2\11"+
    "\1\5\46\11\6\0\3\5\1\0\1\5\2\0\1\5"+
    "\7\0\1\11\1\0\10\5\12\0\246\5\232\11\146\5"+
    "\157\11\21\5\304\11\274\5\57\11\321\5\107\11\271\5"+
    "\71\11\7\5\37\11\1\5\12\0\146\5\36\11\2\5"+
    "\5\0\13\5\60\11\7\0\11\5\4\11\14\5\12\0"+
    "\11\5\25\11\5\5\23\11\160\5\105\11\13\5\1\11"+
    "\56\0\20\5\4\0\15\11\100\5\2\11\36\5\355\11"+
    "\23\5\363\11\15\5\37\11\121\5\u018c\11\4\5\153\11"+
    "\5\5\15\11\3\5\11\11\7\5\12\11\3\5\2\0"+
    "\1\5\4\0\301\5\5\0\3\5\26\0\2\5\7\0"+
    "\36\5\4\0\224\5\3\0\273\5\125\11\1\5\107\11"+
    "\1\5\2\11\2\5\1\11\2\5\2\11\2\5\4\11"+
    "\1\5\14\11\1\5\1\11\1\5\7\11\1\5\101\11"+
    "\1\5\4\11\2\5\10\11\1\5\7\11\1\5\34\11"+
    "\1\5\4\11\1\5\5\11\1\5\1\11\3\5\7\11"+
    "\1\5\u0154\11\2\5\31\11\1\5\31\11\1\5\37\11"+
    "\1\5\31\11\1\5\37\11\1\5\31\11\1\5\37\11"+
    "\1\5\31\11\1\5\37\11\1\5\31\11\1\5\10\11"+
    "\2\5\151\0\4\5\62\0\10\5\1\0\16\5\1\0"+
    "\26\5\5\0\1\5\17\0\120\5\7\0\1\5\21\0"+
    "\2\5\7\0\1\5\2\0\1\5\5\0\325\5\305\11"+
    "\13\5\7\0\51\5\104\11\7\0\5\5\12\0\246\5"+
    "\4\11\1\5\33\11\1\5\2\11\1\5\1\11\2\5"+
    "\1\11\1\5\12\11\1\5\4\11\1\5\1\11\1\5"+
    "\1\11\6\5\1\11\4\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\3\11\1\5\2\11\1\5\1\11\2\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\2\11\1\5\1\11\2\5\4\11\1\5"+
    "\7\11\1\5\4\11\1\5\4\11\1\5\1\11\1\5"+
    "\12\11\1\5\21\11\5\5\3\11\1\5\5\11\1\5"+
    "\21\11\104\5\327\11\51\5\65\11\13\5\336\11\2\5"+
    "\u0182\11\16\5\u0131\11\37\5\36\11\343\5\1\0\36\5"+
    "\140\0\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\7\4\1\23\13\4\1\24"+
    "\1\0\1\25\1\0\1\26\1\27\2\0\1\3\1\0"+
    "\1\30\4\31\1\32\2\31\17\4\1\33\2\0\1\34"+
    "\3\31\23\4\1\0\1\3\1\31\1\35\20\4\1\36"+
    "\3\4\1\37\1\40\1\31\2\4\1\41\1\4\1\42"+
    "\6\4\1\43\6\4\1\0\1\31\1\4\1\44\3\4"+
    "\1\45\11\4\5\0\1\31\1\46\3\4\1\0\3\4"+
    "\1\47\5\4\6\0\1\31\1\0\2\4\1\50\1\0"+
    "\1\51\1\52\1\53\2\4\1\0\1\54\1\4\6\0"+
    "\1\55\1\0\2\4\1\0\2\4\1\0\1\4\3\0"+
    "\1\56\1\57\2\0\1\4\1\60\1\0\1\4\1\61"+
    "\2\0\1\4\5\0\1\62\1\0\1\63\3\0\1\4"+
    "\1\0\1\64\23\0\1\65\10\0\1\66\13\0\1\67"+
    "\1\0\1\70\3\0\1\71\10\0\1\72\11\0\1\73"+
    "\1\74\1\0\1\75\2\0\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\75\0\75\0\172\0\267\0\364\0\u0131"+
    "\0\75\0\75\0\75\0\75\0\u016e\0\u01ab\0\75\0\u01e8"+
    "\0\u0225\0\u0262\0\75\0\75\0\75\0\u029f\0\75\0\u02dc"+
    "\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\75\0\u0487"+
    "\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\75\0\364\0\364\0\u0726\0\75\0\75"+
    "\0\u0225\0\u0763\0\u07a0\0\u07dd\0\75\0\u0319\0\u081a\0\u0857"+
    "\0\u0894\0\u0319\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea"+
    "\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u07dd\0\u0d95"+
    "\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d"+
    "\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165"+
    "\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u0d1b\0\u1310"+
    "\0\u0319\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb"+
    "\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3"+
    "\0\u16e0\0\u0131\0\u171d\0\u175a\0\u1797\0\u17d4\0\u0131\0\u1811"+
    "\0\u184e\0\u188b\0\u0131\0\u18c8\0\u0131\0\u1905\0\u1942\0\u197f"+
    "\0\u19bc\0\u19f9\0\u1a36\0\u0131\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u0131\0\u1c98\0\u1cd5"+
    "\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd"+
    "\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5"+
    "\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d"+
    "\0\u22ca\0\u0131\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438"+
    "\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620"+
    "\0\u265d\0\u0131\0\u269a\0\u0131\0\u0131\0\u0131\0\u26d7\0\u2714"+
    "\0\u2751\0\u0131\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf"+
    "\0\u28fc\0\u0319\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a"+
    "\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\75\0\75\0\u2bd8"+
    "\0\u2c15\0\u2c52\0\u0131\0\u2c8f\0\u2ccc\0\u0131\0\u2d09\0\u2d46"+
    "\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u0131\0\u2ef1"+
    "\0\u0131\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\75\0\u305f"+
    "\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247"+
    "\0\u3284\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f"+
    "\0\u346c\0\u34a9\0\75\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da"+
    "\0\u3617\0\u3654\0\u3691\0\75\0\u36ce\0\u370b\0\u3748\0\u3785"+
    "\0\u37c2\0\u37ff\0\u383c\0\u3879\0\u38b6\0\u38f3\0\u3930\0\75"+
    "\0\u396d\0\75\0\u39aa\0\u39e7\0\u3a24\0\75\0\u3a61\0\u3a9e"+
    "\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c\0\75\0\u3c49"+
    "\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4\0\u3e31"+
    "\0\75\0\75\0\u3e6e\0\75\0\u3eab\0\u3ee8\0\75\0\75";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\2\1\3\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\3\31\1\32\1\31\1\33\1\34\1\35"+
    "\2\31\1\36\1\31\1\37\2\10\1\40\1\41\1\42"+
    "\1\43\1\10\1\44\1\45\1\46\1\47\2\10\1\50"+
    "\1\51\1\52\5\10\100\0\1\4\121\0\1\53\45\0"+
    "\2\54\4\0\2\54\1\55\6\54\1\0\26\54\1\0"+
    "\26\54\11\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\25\10\17\0\1\57\75\0\1\60\2\0"+
    "\1\61\1\22\66\0\1\62\3\0\1\63\73\0\1\64"+
    "\1\0\2\61\71\0\1\64\1\0\2\22\100\0\1\65"+
    "\56\0\1\10\5\0\1\56\2\0\2\66\5\0\6\66"+
    "\1\67\6\66\1\0\25\66\12\0\1\10\5\0\1\56"+
    "\2\0\2\66\5\0\15\66\1\0\25\66\12\0\1\10"+
    "\5\0\1\56\2\0\2\66\5\0\1\70\14\66\1\0"+
    "\25\66\12\0\1\10\5\0\1\56\2\0\2\66\5\0"+
    "\7\66\1\71\5\66\1\0\25\66\12\0\1\10\5\0"+
    "\1\56\2\0\2\66\5\0\11\66\1\72\3\66\1\0"+
    "\25\66\12\0\1\10\5\0\1\56\2\0\2\66\5\0"+
    "\15\66\1\0\16\66\1\73\6\66\12\0\1\10\5\0"+
    "\1\56\2\0\2\66\5\0\11\66\1\74\3\66\1\0"+
    "\25\66\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\14\10\1\75\10\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\1\10\1\76"+
    "\7\10\1\77\2\10\1\100\10\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\5\10\1\101"+
    "\17\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\13\10\1\102\3\10\1\103\3\10\1\104"+
    "\1\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\1\10\1\105\23\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\13\10\1\106"+
    "\11\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\5\10\1\107\17\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\5\10\1\110"+
    "\2\10\1\111\14\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\16\10\1\112\6\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\5\10\1\113\17\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\10\10\1\114\14\10\24\0"+
    "\1\10\51\0\15\115\1\116\57\115\2\63\1\4\1\63"+
    "\1\5\70\63\22\0\2\117\62\0\1\10\5\0\1\56"+
    "\2\0\2\66\5\0\2\66\1\72\12\66\1\0\25\66"+
    "\12\0\1\10\5\0\1\56\2\0\2\66\5\0\5\66"+
    "\1\120\7\66\1\0\25\66\12\0\1\10\5\0\1\56"+
    "\2\0\2\66\5\0\13\66\1\72\1\66\1\0\25\66"+
    "\12\0\1\10\5\0\1\56\2\0\2\66\5\0\15\66"+
    "\1\0\10\66\1\121\14\66\12\0\1\10\5\0\1\56"+
    "\2\0\2\66\5\0\14\66\1\122\1\0\25\66\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\11\10\1\123\13\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\4\10\1\124\20\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\1\10\1\125\23\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\13\10\1\126\11\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\3\10\1\127\13\10\1\130\2\10\1\131\2\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\20\10\1\132\4\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\3\10\1\133\21\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\20\10\1\134\4\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\3\10\1\135\21\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\3\10\1\136\13\10\1\137\5\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\5\10\1\140"+
    "\17\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\20\10\1\141\4\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\5\10\1\142"+
    "\17\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\14\10\1\143\10\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\1\10\1\144"+
    "\23\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\13\10\1\145\11\10\1\0\15\115\1\146"+
    "\74\115\1\146\3\115\1\147\53\115\11\0\1\10\5\0"+
    "\1\56\2\0\2\66\5\0\12\66\1\122\2\66\1\0"+
    "\25\66\12\0\1\10\5\0\1\56\2\0\2\66\5\0"+
    "\15\66\1\0\13\66\1\150\11\66\12\0\1\10\5\0"+
    "\1\56\2\0\2\66\5\0\3\66\1\151\11\66\1\0"+
    "\25\66\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\5\10\1\152\17\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\5\10\1\153"+
    "\17\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\17\10\1\154\5\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\17\10\1\155"+
    "\5\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\16\10\1\156\6\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\4\10\1\157"+
    "\13\10\1\160\4\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\14\10\1\161\10\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\5\10\1\162\6\10\1\163\10\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\16\10\1\164"+
    "\6\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\10\10\1\165\14\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\5\10\1\166"+
    "\17\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\11\10\1\167\4\10\1\170\6\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\20\10\1\171\4\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\16\10\1\172\6\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\14\10\1\173\10\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\13\10\1\174\11\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\15\10\1\175\7\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\11\10\1\176\13\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\14\10\1\177\10\10\1\0\15\115\1\146\3\115\1\4"+
    "\53\115\11\0\1\10\5\0\1\56\2\0\2\66\5\0"+
    "\15\66\1\0\3\66\1\200\21\66\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\1\10\1\201"+
    "\23\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\13\10\1\202\11\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\5\10\1\203"+
    "\17\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\20\10\1\160\4\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\5\10\1\204"+
    "\17\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\5\10\1\205\17\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\16\10\1\206"+
    "\6\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\11\10\1\207\13\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\16\10\1\210"+
    "\6\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\13\10\1\211\11\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\10\10\1\212"+
    "\14\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\5\10\1\213\17\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\16\10\1\214"+
    "\6\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\21\10\1\215\3\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\5\10\1\216"+
    "\17\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\1\10\1\217\23\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\4\10\1\220"+
    "\20\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\20\10\1\221\4\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\10\10\1\222"+
    "\14\10\2\0\1\223\4\0\1\223\2\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\25\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\66\5\0\15\66\1\0"+
    "\10\66\1\224\14\66\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\13\10\1\225\11\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\1\10\1\226\23\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\12\10\1\227\12\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\21\10\1\230\3\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\22\10\1\231\2\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\14\10\1\232\10\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\3\10\1\233\21\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\2\10\1\234\22\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\13\10\1\235\11\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\10\10\1\236\14\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\12\10\1\237\12\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\13\10\1\240\11\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\14\10\1\241\10\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\16\10\1\242\6\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\5\10\1\243\17\10\53\0"+
    "\1\244\5\0\1\245\4\0\1\246\1\247\1\250\16\0"+
    "\1\10\5\0\1\56\2\0\2\66\5\0\15\66\1\0"+
    "\15\66\1\251\7\66\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\14\10\1\252\10\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\5\10\1\253\17\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\3\10\1\254\21\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\5\10\1\255\17\10\2\0\1\256\4\0\1\256\2\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\25\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\5\10\1\257\17\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\10\10\1\260"+
    "\14\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\4\10\1\261\20\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\16\10\1\262"+
    "\6\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\5\10\1\263\17\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\3\10\1\264"+
    "\21\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\17\10\1\265\5\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\1\10\1\266"+
    "\23\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\4\10\1\267\20\10\51\0\1\270\12\0"+
    "\1\271\74\0\1\272\61\0\1\273\100\0\1\274\70\0"+
    "\1\275\35\0\1\10\5\0\1\56\2\0\2\66\5\0"+
    "\15\66\1\0\1\66\1\276\23\66\2\0\1\277\4\0"+
    "\1\277\2\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\25\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\13\10\1\300\11\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\20\10\1\301\4\10\12\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\16\10\1\302\6\10\53\0"+
    "\1\303\33\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\17\10\1\304\5\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\16\10\1\305"+
    "\6\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\5\10\1\306\17\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\13\10\1\307"+
    "\11\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\10\10\1\310\14\10\7\0\1\311\2\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\25\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\17\10\1\312\5\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\1\10\1\313"+
    "\23\10\54\0\1\314\107\0\1\315\63\0\1\316\76\0"+
    "\1\317\77\0\1\320\74\0\1\321\23\0\1\10\5\0"+
    "\1\56\2\0\2\66\5\0\15\66\1\0\11\66\1\322"+
    "\13\66\53\0\1\323\33\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\20\10\1\324\4\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\14\10\1\325\10\10\51\0\1\326\35\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\20\10\1\327"+
    "\4\10\12\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\1\10\1\330\23\10\65\0\1\331\21\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\4\10\1\332\20\10\55\0\1\333\74\0\1\334\70\0"+
    "\1\335\117\0\1\336\64\0\1\337\66\0\1\340\67\0"+
    "\1\341\35\0\1\10\5\0\1\56\2\0\2\10\5\0"+
    "\15\10\1\0\1\10\1\342\23\10\12\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\16\10\1\343"+
    "\6\10\54\0\1\344\32\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\1\10\1\345\23\10\12\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\16\10\1\346\6\10\66\0\1\347\2\0\1\350\15\0"+
    "\1\10\5\0\1\56\2\0\2\10\5\0\15\10\1\0"+
    "\5\10\1\351\17\10\63\0\1\352\74\0\1\353\77\0"+
    "\1\354\63\0\1\355\73\0\1\356\32\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\16\10\1\357"+
    "\6\10\55\0\1\360\31\0\1\10\5\0\1\56\2\0"+
    "\2\10\5\0\15\10\1\0\16\10\1\361\6\10\60\0"+
    "\1\362\3\0\1\363\62\0\1\364\34\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\17\10\1\365"+
    "\5\10\51\0\1\366\107\0\1\367\70\0\1\370\77\0"+
    "\1\371\66\0\1\372\102\0\1\373\103\0\1\374\72\0"+
    "\1\375\65\0\1\376\22\0\1\377\2\0\1\10\5\0"+
    "\1\56\2\0\2\10\5\0\15\10\1\0\25\10\32\0"+
    "\1\u0100\132\0\1\u0101\74\0\1\u0102\67\0\1\u0103\62\0"+
    "\1\u0104\74\0\1\u0105\100\0\1\u0106\77\0\1\u0107\101\0"+
    "\1\u0108\75\0\1\u0109\70\0\1\u010a\67\0\1\u010b\70\0"+
    "\1\u010c\55\0\1\u010d\116\0\1\u010e\76\0\1\u010f\71\0"+
    "\1\u0110\107\0\1\u0111\2\0\1\u0112\60\0\1\u0113\103\0"+
    "\1\u0114\42\0\1\u0115\117\0\1\u0116\103\0\1\u0117\70\0"+
    "\1\u0118\100\0\1\u0119\70\0\1\u011a\3\0\1\u011b\62\0"+
    "\1\u011c\73\0\1\u011d\75\0\1\u011e\105\0\1\u011f\100\0"+
    "\1\u0120\61\0\1\u0121\107\0\1\u0122\77\0\1\u0123\72\0"+
    "\1\u0124\65\0\1\u0125\74\0\1\u0126\77\0\1\u0127\100\0"+
    "\1\u0128\70\0\1\u0129\61\0\1\u012a\100\0\1\u012b\77\0"+
    "\1\u012c\75\0\1\u012d\70\0\1\u012e\106\0\1\u012f\61\0"+
    "\1\u0130\76\0\1\u0131\71\0\1\u0132\76\0\1\u0133\105\0"+
    "\1\u0134\57\0\1\u0135\103\0\1\u0136\65\0\1\u0137\74\0"+
    "\1\u0138\107\0\1\u0139\77\0\1\u013a\61\0\1\u013b\107\0"+
    "\1\u013c\70\0\1\u013d\62\0\1\u013e\107\0\1\u013f\77\0"+
    "\1\u0140\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16165];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\4\1\4\11\2\1\1\11\3\1\3\11"+
    "\1\1\1\11\7\1\1\11\13\1\1\11\1\0\1\1"+
    "\1\0\2\11\2\0\1\1\1\0\1\11\27\1\2\0"+
    "\27\1\1\0\54\1\1\0\20\1\5\0\5\1\1\0"+
    "\11\1\6\0\1\1\1\0\3\1\1\0\5\1\1\0"+
    "\2\1\6\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\3\0\2\11\2\0\2\1\1\0\2\1\2\0"+
    "\1\1\5\0\1\1\1\0\1\1\3\0\1\1\1\0"+
    "\1\11\23\0\1\11\10\0\1\11\13\0\1\11\1\0"+
    "\1\11\3\0\1\11\10\0\1\11\11\0\2\11\1\0"+
    "\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(sym.error);
            }
            // fall through
          case 64: break;
          case 2:
            { return new Symbol(sym.SPC);
            }
            // fall through
          case 65: break;
          case 3:
            { 
            }
            // fall through
          case 66: break;
          case 4:
            { return new Symbol(sym.IDEN);
            }
            // fall through
          case 67: break;
          case 5:
            { return new Symbol(sym.MOD);
            }
            // fall through
          case 68: break;
          case 6:
            { return new Symbol(sym.PIZ);
            }
            // fall through
          case 69: break;
          case 7:
            { return new Symbol(sym.PDR);
            }
            // fall through
          case 70: break;
          case 8:
            { return new Symbol(sym.MUL);
            }
            // fall through
          case 71: break;
          case 9:
            { return new Symbol(sym.SUM);
            }
            // fall through
          case 72: break;
          case 10:
            { return new Symbol(sym.RES);
            }
            // fall through
          case 73: break;
          case 11:
            { return new Symbol(sym.P);
            }
            // fall through
          case 74: break;
          case 12:
            { return new Symbol(sym.DIV);
            }
            // fall through
          case 75: break;
          case 13:
            { return new Symbol(sym.NUM);
            }
            // fall through
          case 76: break;
          case 14:
            { return new Symbol(sym.DSP);
            }
            // fall through
          case 77: break;
          case 15:
            { return new Symbol(sym.FLC);
            }
            // fall through
          case 78: break;
          case 16:
            { return new Symbol(sym.MNQ);
            }
            // fall through
          case 79: break;
          case 17:
            { return new Symbol(sym.EQ);
            }
            // fall through
          case 80: break;
          case 18:
            { return new Symbol(sym.MYQ);
            }
            // fall through
          case 81: break;
          case 19:
            { return new Symbol(sym.POT);
            }
            // fall through
          case 82: break;
          case 20:
            { return new Symbol(sym.NEQ);
            }
            // fall through
          case 83: break;
          case 21:
            { return new Symbol(sym.CADTXT);
            }
            // fall through
          case 84: break;
          case 22:
            { return new Symbol(sym.INCR);
            }
            // fall through
          case 85: break;
          case 23:
            { return new Symbol(sym.DECR);
            }
            // fall through
          case 86: break;
          case 24:
            { return new Symbol(sym.EQEQ);
            }
            // fall through
          case 87: break;
          case 25:
            { return new Symbol(sym.NMCL);
            }
            // fall through
          case 88: break;
          case 26:
            { return new Symbol(sym.OLOG);
            }
            // fall through
          case 89: break;
          case 27:
            { return new Symbol(sym.IF);
            }
            // fall through
          case 90: break;
          case 28:
            { return new Symbol(sym.NUMR);
            }
            // fall through
          case 91: break;
          case 29:
            { return new Symbol(sym.NBOOL);
            }
            // fall through
          case 92: break;
          case 30:
            { return new Symbol(sym.RD);
            }
            // fall through
          case 93: break;
          case 31:
            { return new Symbol(sym.FLOAT);
            }
            // fall through
          case 94: break;
          case 32:
            { return new Symbol(sym.ELS);
            }
            // fall through
          case 95: break;
          case 33:
            { return new Symbol(sym.CL);
            }
            // fall through
          case 96: break;
          case 34:
            { return new Symbol(sym.FRD);
            }
            // fall through
          case 97: break;
          case 35:
            { return new Symbol(sym.FRH);
            }
            // fall through
          case 98: break;
          case 36:
            { return new Symbol(sym.STRING);
            }
            // fall through
          case 99: break;
          case 37:
            { return new Symbol(sym.INT);
            }
            // fall through
          case 100: break;
          case 38:
            { return new Symbol(sym.BOOL);
            }
            // fall through
          case 101: break;
          case 39:
            { return new Symbol(sym.IMP);
            }
            // fall through
          case 102: break;
          case 40:
            { return new Symbol(sym.RETN);
            }
            // fall through
          case 103: break;
          case 41:
            { return new Symbol(sym.THN);
            }
            // fall through
          case 104: break;
          case 42:
            { return new Symbol(sym.WT);
            }
            // fall through
          case 105: break;
          case 43:
            { return new Symbol(sym.CLEX);
            }
            // fall through
          case 106: break;
          case 44:
            { return new Symbol(sym.FRM);
            }
            // fall through
          case 107: break;
          case 45:
            { return new Symbol(sym.METPRIN);
            }
            // fall through
          case 108: break;
          case 46:
            { return new Symbol(sym.SQRT);
            }
            // fall through
          case 109: break;
          case 47:
            { return new Symbol(sym.SEN);
            }
            // fall through
          case 110: break;
          case 48:
            { return new Symbol(sym.MetRes);
            }
            // fall through
          case 111: break;
          case 49:
            { return new Symbol(sym.CLIN);
            }
            // fall through
          case 112: break;
          case 50:
            { return new Symbol(sym.FRDEC);
            }
            // fall through
          case 113: break;
          case 51:
            { return new Symbol(sym.FRINC);
            }
            // fall through
          case 114: break;
          case 52:
            { return new Symbol(sym.COS);
            }
            // fall through
          case 115: break;
          case 53:
            { return new Symbol(sym.TAN);
            }
            // fall through
          case 116: break;
          case 54:
            { return new Symbol(sym.LOG);
            }
            // fall through
          case 117: break;
          case 55:
            { return new Symbol(sym.CLMTPV);
            }
            // fall through
          case 118: break;
          case 56:
            { return new Symbol(sym.CLMTPU);
            }
            // fall through
          case 119: break;
          case 57:
            { return new Symbol(sym.FcF);
            }
            // fall through
          case 120: break;
          case 58:
            { return new Symbol(sym.CLMTPT);
            }
            // fall through
          case 121: break;
          case 59:
            { return new Symbol(sym.FcI);
            }
            // fall through
          case 122: break;
          case 60:
            { return new Symbol(sym.CLPRPV);
            }
            // fall through
          case 123: break;
          case 61:
            { return new Symbol(sym.CLPRPU);
            }
            // fall through
          case 124: break;
          case 62:
            { return new Symbol(sym.FcB);
            }
            // fall through
          case 125: break;
          case 63:
            { return new Symbol(sym.CLPRPT);
            }
            // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
