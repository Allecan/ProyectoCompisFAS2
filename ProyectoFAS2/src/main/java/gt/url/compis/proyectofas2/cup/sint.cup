package gt.url.compis.proyectofas2;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

parser code {:

public ArrayList<String> SyntacticErrors = new ArrayList<String>();

public void syntax_error( Symbol s )
{
    System.out.println("Error de Sintaxis en: " +s.value );    
    System.out.println( "Linea " + s.left );
    System.out.println( "Columna " + s.right );
    SyntacticErrors.add("* Error Sintactico. Linea: " + (s.left+1) + " Columna: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' * Mensaje Error: Simbolo no reconocido.");
}

public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception
{

}

:};

/* Ejemplo para que te ponga el lexema xdâ†’ 
     Import_lib ::= IMP SPC CADTXT NUM:ca 
        {: System.out.println("Linea: " + caleft + " Lexema: " +ca); :}; */


terminal IF,THN, ELS;                                                           //Tokens para los if 
terminal INT, STRING, BOOL, FLOAT;                                              //Tokens de tipos de datos
terminal FRD, FRM, FRH, FRINC, FRDEC;                                           //Tokens para los for 
terminal NBOOL, NUM, NUMR, IDEN, CADTXT, NMCL;                                  //Tokens de elementos basicos   
terminal CL, CLEX, CLPRPU, CLPRPT, CLPRPV, CLMTPU, CLMTPT, CLMTPV;              //Tokens para las clases
terminal MetRes, METPRIN, IMP, FcF, FcI, FcB, SEN, COS, TAN, LOG, SQRT, RETN, CLIN, RD, WT;
terminal  SPC, P, COMA, INCR, DECR, POT, EQ, EQEQ, NEQ, MYQ, MNQ, PIZ, PDR, FLC, OLOG, SUM, RES, MUL, DIV, MOD, DSP;

non terminal LOOP, LineaC, Import_lib, Gramar_clase, FuncPrin;
non terminal Decl_clase, Prop_clase, Metod_clase;
non terminal STRUC_if, ifU, ifELS, cond1, cond2, cond3, cond4, cond5;
non terminal DeclPrin, CodSuelt, Pinea, Retor, Salida, Asign, Declar, Metodo, ESTRUCTURA_INSTANCIAR;
non terminal OPERACIONES_CICLOS, SIGNOS_COMPARACION, OPERACIONES_ARITMETICAS, ESTRUCTURA_FOR, OPERACIONES_DO, ESTRUCTURA_DO, ESPACIOS_5; //funciones para ciclos

precedence left CL;


LOOP ::= LineaC LOOP | LineaC;

LineaC ::= Import_lib | Gramar_clase FuncPrin | FuncPrin;

Import_lib ::= IMP SPC CADTXT;

FuncPrin ::= DeclPrin CodSuelt;

DeclPrin ::= INT SPC METPRIN PIZ PDR;

Gramar_clase ::= Decl_clase Gramar_clase | Decl_clase;


Decl_clase ::= CL SPC NMCL Prop_clase | CL SPC NMCL Metod_clase;

Prop_clase ::= SPC SPC CLPRPU DSP SPC SPC CodSuelt FLC Prop_clase | SPC SPC CLPRPU DSP
            | SPC SPC CLPRPV DSP SPC SPC CodSuelt FLC Prop_clase | SPC SPC CLPRPV DSP 
            | SPC SPC CLPRPT DSP SPC SPC CodSuelt FLC Prop_clase | SPC SPC CLPRPT DSP;      

Metod_clase ::= SPC SPC CLMTPU DSP SPC SPC CodSuelt FLC Metod_clase| SPC SPC CLMTPU DSP 
            | SPC SPC CLMTPV DSP SPC SPC CodSuelt FLC Metod_clase | SPC SPC CLMTPV DSP 
            | SPC SPC CLMTPT DSP SPC SPC CodSuelt FLC Metod_clase | SPC SPC CLMTPT DSP;

CodSuelt ::= Pinea CodSuelt | Pinea;

Pinea ::= SPC SPC Salida 
        | SPC SPC RD SPC IDEN 
        | SPC SPC Retor 
        | SPC SPC Asign 
        | SPC SPC Declar 
        | SPC SPC Metodo
        | SPC SPC STRUC_if
        | SPC SPC ESTRUCTURA_FOR 
        | SPC SPC ESTRUCTURA_DO
        | SPC SPC ESTRUCTURA_INSTANCIAR;

Retor ::= RETN SPC NUM;

Salida ::= WT SPC CADTXT                                                      
        | WT SPC IDEN 
        | WT SPC CADTXT COMA SPC IDEN 
        | WT SPC IDEN COMA SPC CADTXT 
        | WT SPC IDEN COMA SPC CADTXT COMA SPC IDEN
        | WT SPC IDEN COMA SPC NUM COMA SPC CADTXT
        | WT SPC Metodo
        | WT SPC Metodo COMA SPC Metodo
        | WT SPC Metodo COMA SPC IDEN;

Asign ::= IDEN SPC EQ SPC NUM                                                
        | IDEN SPC EQ SPC CADTXT 
        | IDEN SPC EQ SPC NUMR 
        | IDEN SPC EQ SPC IDEN OPERACIONES_ARITMETICAS NUM 
        | IDEN SPC EQ SPC NUM OPERACIONES_ARITMETICAS IDEN 
        | IDEN SPC EQ SPC NUM OPERACIONES_ARITMETICAS NUM 
        | IDEN SPC EQ SPC IDEN
        | Metodo EQ SPC NUM;

Metodo ::= IDEN P IDEN PIZ IDEN PDR | IDEN P IDEN PIZ PDR | IDEN P IDEN;

OPERACIONES_ARITMETICAS ::= SUM
                           |RES
                           |MUL
                           |MOD
                           |DIV;

OPERACIONES_CICLOS ::= INCR
                      |DECR
                      |FRDEC
                      |FRINC;

SIGNOS_COMPARACION ::= EQEQ
                      |NEQ
                      |MYQ
                      |MNQ;

ESTRUCTURA_FOR ::= FRD SPC IDEN SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM SPC OPERACIONES_CICLOS SPC NUM SPC FRH SPC SPC SPC SPC SPC WT SPC IDEN
                  |FRD SPC IDEN SPC EQ SPC NUM SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM SPC FRH SPC SPC SPC SPC SPC WT SPC IDEN SPC SPC SPC SPC SPC IDEN SPC EQ SPC IDEN OPERACIONES_ARITMETICAS NUM
                  |FRD SPC IDEN SPC EQ SPC NUM SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM SPC FRH SPC SPC SPC SPC SPC WT SPC IDEN SPC SPC SPC SPC SPC IDEN SPC EQ SPC IDEN OPERACIONES_CICLOS;

OPERACIONES_DO ::= IDEN EQ NUM OPERACIONES_ARITMETICAS NUM OPERACIONES_DO
                  |IDEN EQ IDEN OPERACIONES_ARITMETICAS IDEN OPERACIONES_DO
                  |IDEN EQ IDEN OPERACIONES_ARITMETICAS NUM OPERACIONES_DO
                  |IDEN EQ NUM OPERACIONES_ARITMETICAS IDEN OPERACIONES_DO
                  |IDEN EQ NUM OPERACIONES_ARITMETICAS NUM 
                  |IDEN EQ IDEN OPERACIONES_ARITMETICAS IDEN 
                  |IDEN EQ IDEN OPERACIONES_ARITMETICAS NUM 
                  |IDEN EQ NUM OPERACIONES_ARITMETICAS IDEN;

ESTRUCTURA_DO ::= FRH SPC SPC SPC SPC SPC OPERACIONES_DO SPC SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC IDEN
                 |FRH SPC SPC SPC SPC SPC OPERACIONES_DO SPC SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM
                 |SPC SPC FRH SPC SPC SPC SPC SPC OPERACIONES_DO SPC SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC IDEN
                 |SPC SPC FRH SPC SPC SPC SPC SPC OPERACIONES_DO SPC SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM;

ESTRUCTURA_INSTANCIAR ::= NMCL SPC IDEN SPC EQ SPC CLIN SPC NMCL PIZ PDR
                         |IDEN SPC EQ SPC CLIN SPC NMCL PIZ PDR;
                
Declar ::= INT SPC Asign | FLOAT SPC Asign | STRING SPC Asign |INT SPC IDEN SPC | STRING SPC IDEN SPC | NMCL SPC IDEN SPC ; 

STRUC_if ::=  ifU STRUC_if | ifELS STRUC_if |ifU | ifELS ; 

ifU     ::= IF SPC cond1 SPC THN SPC SPC CodSuelt FLC SPC SPC SPC SPC RETN SPC NUM
            | IF SPC cond2 SPC THN SPC SPC CodSuelt FLC SPC SPC SPC SPC RETN SPC NUM 
            | IF SPC cond3 SPC THN SPC SPC CodSuelt FLC SPC SPC SPC SPC RETN SPC NUM 
            | IF SPC cond4 SPC THN SPC SPC CodSuelt FLC SPC SPC SPC SPC RETN SPC NUM
            | IF SPC cond5 SPC THN SPC SPC CodSuelt FLC SPC SPC SPC SPC RETN SPC NUM; 
      
ifELS   ::= ELS SPC cond1 SPC THN SPC SPC SPC SPC RETN SPC NUM  
            | ELS SPC cond2 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            | ELS SPC cond3 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            | ELS SPC cond4 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            | ELS SPC cond5 SPC THN SPC SPC SPC SPC RETN SPC NUM 
            | ELS SPC SPC SPC SPC RETN SPC NUM;  

cond1   ::= IDEN MOD NUM;
cond2   ::= IDEN EQEQ NUM;
cond3   ::= IDEN NEQ NUM;
cond4   ::= IDEN MYQ NUM;
cond5   ::= IDEN MNQ NUM;