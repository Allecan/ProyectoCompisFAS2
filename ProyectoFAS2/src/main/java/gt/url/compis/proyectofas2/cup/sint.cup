package gt.url.compis.proyectofas2;
import java_cup.runtime.Symbol;

parser code {:

public void syntax_error( Symbol s )
{
    System.out.println("Error de Sintaxis en: " +s.value );    
    System.out.println( "Linea " + s.left );
    System.out.println( "Columna " + s.right );
}

public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception
{

}

:};

/* Ejemplo para que te ponga el lexema xd â†“
     Import_lib ::= IMP SPC CADTXT NUM:ca 
        {: System.out.println("Linea: " + caleft + " Lexema: " +ca); :}; */

terminal IF,THN, ELS;                                                           //Tokens para los if 
terminal INT, STRING, BOOL, FLOAT;                                              //Tokens de tipos de datos
terminal FRD, FRM, FRH, FRINC, FRDEC;                                           //Tokens para los for 
terminal NBOOL, NUM, NUMR, IDEN, CADTXT, NMCL;                                  //Tokens de elementos basicos   
terminal CL, CLEX, CLPRPU, CLPRPT, CLPRPV, CLMTPU, CLMTPT, CLMTPV;              //Tokens para las clases
terminal MetRes, METPRIN, IMP, FcF, FcI, FcB, SEN, COS, TAN, LOG, SQRT, RETN, CLIN, RD, WT;
terminal SPC, P, COMA, INCR, DECR, POT, EQ, EQEQ, NEQ, MYQ, MNQ, PIZ, PDR, FLC, OLOG, SUM, RES, MUL, DIV, MOD, DSP;

non terminal LOOP, LineaC, Import_lib, Gramar_clase, FuncPrin;
non terminal Clase_CMP, Clase_SMP, Prop_clase, Prop_tipo, Metod_clase, Met_tipo;
non terminal STRUC_if, ifU, ifELS, cond1, cond2, cond3, cond4, cond5;}
non terminal DeclPrin, CodSuelt, Pinea, Retor, Salida, Asign;
non terminal OPERACIONES_CICLOS, SIGNOS_COMPARACION, OPERACIONES_ARITMETICAS, ESTRUCTURA_FOR; //funciones en el for

LOOP ::= LineaC LOOP | LineaC;

LineaC ::= Import_lib | Gramar_clase | FuncPrin;

FuncPrin ::= DeclPrin CodSuelt;

DeclPrin ::= INT SPC METPRIN PIZ PDR;

CodSuelt ::= Pinea CodSuelt | Pinea;

Pinea ::= SPC SPC Salida | SPC SPC RD SPC IDEN | SPC SPC Retor | SPC SPC Asign | SPC SPC ESTRUCTURA_FOR;

Retor ::= RETN SPC NUM;

Salida ::= WT SPC CADTXT                                                        //falta agregar
        | WT SPC IDEN 
        | WT SPC CADTXT COMA SPC IDEN 
        | WT SPC IDEN COMA SPC CADTXT 
        | WT SPC IDEN COMA SPC NUM COMA SPC CADTXT;

Asign ::= IDEN SPC EQ SPC NUM                                                   //falta agregar
        | IDEN SPC EQ SPC CADTXT 
        | IDEN SPC EQ SPC NUMR 
        | IDEN SPC EQ SPC IDEN SUM NUM 
        | IDEN SPC EQ SPC NUM SUM IDEN 
        | IDEN SPC EQ SPC IDEN ;

OPERACIONES_ARITMETICAS ::= SUM
                           |RES
                           |MUL
                           |DIV;

OPERACIONES_CICLOS ::= INCR
                      |DECR
                      |FRDEC
                      |FRINC;

SIGNOS_COMPARACION ::= EQEQ
                      |NEQ
                      |MYQ
                      |MNQ;

ESTRUCTURA_FOR ::= FRD SPC IDEN SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM SPC OPERACIONES_CICLOS SPC NUM SPC FRH SPC SPC SPC SPC SPC WT SPC IDEN
                  |FRD SPC IDEN SPC EQ SPC NUM SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM SPC FRH SPC SPC SPC SPC SPC WT SPC IDEN SPC SPC SPC SPC SPC IDEN SPC EQ SPC IDEN OPERACIONES_ARITMETICAS NUM
                  |FRD SPC IDEN SPC EQ SPC NUM SPC FRM SPC IDEN SPC SIGNOS_COMPARACION SPC NUM SPC FRH SPC SPC SPC SPC SPC WT SPC IDEN SPC SPC SPC SPC SPC IDEN SPC EQ SPC IDEN OPERACIONES_CICLOS;
